var searchIndex = JSON.parse('{\
"acs":{"doc":"Acs is an experimental project for learning computer â€¦","t":[0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,11,11],"n":["logic","and","nand","not","or","signal","unit","And","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Nand","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HI","LO","Signal","as_bool","bitand","bitand_assign","bitor_assign","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","fmt","from","from","from","from","into","new","not","to_owned","to_string","try_from","try_into","type_id","Unit","eval","tick","tock"],"q":["acs","acs::logic","","","","","","acs::logic::and","","","","","","","","","","","acs::logic::nand","","","","","","","","","","","acs::logic::not","","","","","","","","","","","acs::logic::or","","","","","","","","","","","acs::logic::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::unit","","",""],"d":["","","","","","","","The AND gate is built using a NOT and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a AND b</code>","","","","The NAND gate is the only built-in logic component","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a NAND b</code>","","","","The NOT gate is built using a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>NOT inp</code>","","","","The OR gate is built using two NOTs and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a OR b</code>","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Common operations for a logic unit","Evaluates the logic expression as we do with arithmetic","Carries out the tick-phase of a clock cycle: LOW","Carries out the tock-phase of a clock cycle: HIGH"],"i":[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,15,15,15],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[1],[[]],[[]],[[1,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],5],[5],[[]],[[]],[[5,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],6],[6],[[]],[[]],[[6,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],7],[7],[[]],[[]],[[7,2,2],2],[[],3],[[],3],[[],4],0,0,0,[2,8],[[2,2]],[[2,2]],[[2,2]],[[]],[[]],[2,2],[[]],[[],2],[[2,9],8],[[2,2],8],[[2,10],11],[[2,10],11],[12,2],[13,2],[8,2],[[]],[[]],[9,2],[2],[[]],[[],14],[[],3],[[],3],[[],4],0,[[]],[[]],[[]]],"p":[[3,"And"],[4,"Signal"],[4,"Result"],[3,"TypeId"],[3,"Nand"],[3,"Not"],[3,"Or"],[15,"bool"],[15,"i8"],[3,"Formatter"],[6,"Result"],[15,"i32"],[15,"u8"],[3,"String"],[8,"Unit"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

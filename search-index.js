var searchIndex = JSON.parse('{\
"acs":{"doc":"Acs is an experimental project for learning computer â€¦","t":[0,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,12,12,11,11,12,11,11,11,11,11,11,11,12,12,11,12,12,12,11,11,11,11,11,11,12,3,12,11,11,11,11,11,11,11,12,11,12,12,11,12,12,12,12,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,4,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,12,11,11,12,12,12,12,11,12,11,11,11,11,11,11,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,13,13,13,13,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,11,11,3,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,3,11,11,11,11,11,12,12,11,12,11,12,12,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,3,11,11,12,11,11,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,13,13,13,13,13,13,13,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["arch","asm","logic","mem","vm","computer","cpu","fast","keyboard","memory","rom32k","screen","Computer","borrow","borrow_mut","default","eval","from","get_keyboard_mut","get_screen","into","reset","set_instructions","tick","tock","try_from","try_into","type_id","Cpu","borrow","borrow_mut","default","eval","from","get_address_m","get_out_m","get_pc","get_write_m","into","sim","tick","tock","try_from","try_into","type_id","cpu","memory","Cpu","a_register","address_m","borrow","borrow_mut","d_register","default","eval","from","get_address_m","get_out_m","get_pc","get_write_m","in_m","instruction","into","out_m","pc","reset","sim","tick","tock","try_from","try_into","type_id","write_m","Memory","address","borrow","borrow_mut","default","eval","from","get_keyboard_mut","get_screen","inp","into","keyboard","load","out","out","ram","screen","selected","sim","tick","try_from","try_into","type_id","Keyboard","borrow","borrow_mut","default","eval","from","into","out","set","try_from","try_into","type_id","unset","Memory","address","borrow","borrow_mut","default","eval","from","get_keyboard_mut","get_screen","inp","into","load","out","sim","tick","try_from","try_into","type_id","Rom32k","borrow","borrow_mut","default","eval","from","into","out","set_address","set_instructions","sim","try_from","try_into","type_id","Screen","as_bytes","borrow","borrow_mut","default","dump","eval","from","get_height","get_pixel","get_width","into","out","set_address","sim","tick","try_from","try_into","type_id","assembler","instruction","Assembler","assemble","borrow","borrow_mut","default","from","into","new","resolve","translate","try_from","try_into","type_id","A","A","A","AD","AM","AMD","AMinusD","AMinusOne","APlusOne","AsmInstruction","C","Comp","D","D","DAndA","DAndM","DM","DMinusA","DMinusM","DMinusOne","DOrA","DOrM","DPlusA","DPlusM","DPlusOne","Dest","Eq","Ge","Gt","Jump","Jump","Label","Le","Lt","M","M","MMinusD","MMinusOne","MPlusOne","MinusA","MinusD","MinusM","MinusOne","Ne","No","NotA","NotD","NotM","Null","One","Symbol","Zero","bitor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","hash","hash","hash","hash","into","into","into","into","ne","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","0","1","2","add16","alu","and","and16","demux","demux4way","demux8way","fast","fulladder","halfadder","inc16","mux","mux16","mux4way16","mux8way16","nand","nand16","not","not16","or","or16","or16way","or8way","signal","signal12","signal13","signal14","signal15","signal16","signal2","signal3","signal6","signal8","signal9","unit","xor","Add16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Alu","borrow","borrow_mut","default","eval","from","into","out","set_x","set_y","sim","try_from","try_into","type_id","And","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","And16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux4Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","alu","Alu","borrow","borrow_mut","default","eval","f","from","into","ng","no","nx","ny","out","out","set_x","set_y","sim","try_from","try_into","type_id","x","y","zr","zx","zy","FullAdder","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HalfAdder","borrow","borrow_mut","default","eval","from","into","new","sim","try_from","try_into","type_id","Inc16","borrow","borrow_mut","default","eval","from","get_out","into","sim","try_from","try_into","type_id","Mux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux16","borrow","borrow_mut","default","eval","from","into","out","set_a","sim","try_from","try_into","type_id","Mux4Way16","borrow","borrow_mut","default","eval","from","into","sel","sim","try_from","try_into","type_id","Mux8Way16","borrow","borrow_mut","default","eval","from","into","sel","sim","try_from","try_into","type_id","Nand","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Nand16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HI","LO","Signal","as_bool","bitand","bitand_assign","bitor","bitor_assign","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal12","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal13","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal14","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal15","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal16","TRUE","add","add","add_assign","bitand","bitor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","from","from","get","into","neg","new","not","partial_cmp","set","sub","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id","values","FALSE","HIHI","HILO","LOHI","LOLO","Signal2","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal3","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal6","TRUE","as_u8","as_usize","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal8","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal9","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","Unit","eval","tick","tock","Xor","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","bit","counter","dff","fast","ram16k","ram4k","ram512","ram64","ram8","register16","time","Bit","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","tock","try_from","try_into","type_id","Counter","borrow","borrow_mut","default","eval","from","into","out","sim","tick","tock","try_from","try_into","type_id","Dff","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","try_from","try_into","type_id","counter","ram","ram16k","ram4k","ram512","ram64","ram8","register16","Counter","borrow","borrow_mut","default","eval","from","inc","inp","into","load","out","out","reset","sim","tick","tock","try_from","try_into","type_id","Ram16k","borrow","borrow_mut","data","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram4k","borrow","borrow_mut","data","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram512","borrow","borrow_mut","data","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram64","borrow","borrow_mut","data","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram8","borrow","borrow_mut","data","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Register16","borrow","borrow_mut","default","eval","fmt","from","from","into","out","run","sim","to_string","tock","try_from","try_into","type_id","Ram16k","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram4k","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram512","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram64","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram8","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Register16","borrow","borrow_mut","default","eval","fmt","from","from","get_out","into","sim","tick","to_string","tock","try_from","try_into","type_id","Time","add_assign","borrow","borrow_mut","default","fmt","from","from","into","to_string","try_from","try_into","type_id","code","emulator","instruction","preprocessor","segment","translator","VmCode","borrow","borrow_mut","code","from","into","name","new","try_from","try_into","type_id","VmEmulator","borrow","borrow_mut","default","from","into","load","pop","pop_into","push","push_from","ram","set","step","try_from","try_into","type_id","Add","And","Eq","Gt","Lt","Neg","Not","Or","Pop","Push","Sub","VmInstruction","borrow","borrow_mut","clone","clone_into","fmt","from","from_str","into","to_owned","try_from","try_into","type_id","0","0","1","1","VmPreprocessedCode","VmPreprocessedCodeBuilder","borrow","borrow","borrow_mut","borrow_mut","build","builder","default","default","from","from","get_lines","include","include_all","into","into","lines","try_from","try_from","try_into","try_into","type_id","type_id","Argument","Constant","Local","Pointer","R13","R14","R15","Segment","Stack","Static","Temp","That","This","borrow","borrow_mut","clone","clone_into","fmt","from","from_str","get_base_address","into","to_owned","try_from","try_into","type_id","VmTranslator","borrow","borrow_mut","default","from","gen_add","gen_neg","gen_not","gen_sub","into","translate","try_from","try_into","type_id"],"q":["acs","","","","","acs::arch","","","","","","","acs::arch::computer","","","","","","","","","","","","","","","","acs::arch::cpu","","","","","","","","","","","","","","","","","acs::arch::fast","","acs::arch::fast::cpu","","","","","","","","","","","","","","","","","","","","","","","","","","acs::arch::fast::memory","","","","","","","","","","","","","","","","","","","","","","","acs::arch::keyboard","","","","","","","","","","","","","acs::arch::memory","","","","","","","","","","","","","","","","","","acs::arch::rom32k","","","","","","","","","","","","","","acs::arch::screen","","","","","","","","","","","","","","","","","","","acs::asm","","acs::asm::assembler","","","","","","","","","","","","","acs::asm::instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::asm::instruction::AsmInstruction","","","","","","acs::logic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::add16","","","","","","","","","","","acs::logic::alu","","","","","","","","","","","","","","acs::logic::and","","","","","","","","","","","acs::logic::and16","","","","","","","","","","","acs::logic::demux","","","","","","","","","","","acs::logic::demux4way","","","","","","","","","","","acs::logic::demux8way","","","","","","","","","","","acs::logic::fast","acs::logic::fast::alu","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::fulladder","","","","","","","","","","","acs::logic::halfadder","","","","","","","","","","","","acs::logic::inc16","","","","","","","","","","","","acs::logic::mux","","","","","","","","","","","acs::logic::mux16","","","","","","","","","","","","","acs::logic::mux4way16","","","","","","","","","","","","acs::logic::mux8way16","","","","","","","","","","","","acs::logic::nand","","","","","","","","","","","acs::logic::nand16","","","","","","","","","","","acs::logic::not","","","","","","","","","","","acs::logic::not16","","","","","","","","","","","acs::logic::or","","","","","","","","","","","acs::logic::or16","","","","","","","","","","","acs::logic::or16way","","","","","","","","","","","acs::logic::or8way","","","","","","","","","","","acs::logic::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal12","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal13","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal14","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal15","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal16","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal6","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal8","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal9","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::unit","","","","acs::logic::xor","","","","","","","","","","","acs::mem","","","","","","","","","","","acs::mem::bit","","","","","","","","","","","","","","acs::mem::counter","","","","","","","","","","","","","","acs::mem::dff","","","","","","","","","","","","","acs::mem::fast","","","","","","","","acs::mem::fast::counter","","","","","","","","","","","","","","","","","","","acs::mem::fast::ram16k","","","","","","","","","","","","","","","","","acs::mem::fast::ram4k","","","","","","","","","","","","","","","","","acs::mem::fast::ram512","","","","","","","","","","","","","","","","","acs::mem::fast::ram64","","","","","","","","","","","","","","","","","acs::mem::fast::ram8","","","","","","","","","","","","","","","","","acs::mem::fast::register16","","","","","","","","","","","","","","","","","acs::mem::ram16k","","","","","","","","","","","","","acs::mem::ram4k","","","","","","","","","","","","","acs::mem::ram512","","","","","","","","","","","","","acs::mem::ram64","","","","","","","","","","","","","acs::mem::ram8","","","","","","","","","","","","","acs::mem::register16","","","","","","","","","","","","","","","","","acs::mem::time","","","","","","","","","","","","","acs::vm","","","","","","acs::vm::code","","","","","","","","","","","acs::vm::emulator","","","","","","","","","","","","","","","","","acs::vm::instruction","","","","","","","","","","","","","","","","","","","","","","","","acs::vm::instruction::VmInstruction","","","","acs::vm::preprocessor","","","","","","","","","","","","","","","","","","","","","","","","acs::vm::segment","","","","","","","","","","","","","","","","","","","","","","","","","","acs::vm::translator","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","The computer consists of three parts:","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Loads instructions into the ROM","","","","","","Central Processing Unit able to execute a given â€¦","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","","","Fast Central Processing Unit able to execute a given â€¦","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","Carries out the simulation, taking as input:","","","","","","","Fast package of three 16-bit chip parts: <code>Ram16k</code>, <code>Screen</code>, â€¦","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","Carries out the simulation, taking as input:","","","","","Built-in register chip acting as a keyboard","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the 16-bit character code of the currently pressed â€¦","","","","","","Package of three 16-bit chip parts: <code>Ram16k</code>, <code>Screen</code>, and â€¦","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","Instruction memory, preloaded with the required program.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Carries out the simulation taking as input an address and â€¦","","","","512x256 black-and-white screen which behaves like a <code>Ram8k</code>.","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","","","The assembler translates programs written in asm language â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Resolves symbols in the assembly to physical memory â€¦","","","","","A-instructions start with <code>0</code>","A register","","A and D register","A register and RAM[A]","A and D register and RAM[A]","","","","","C-instructions start with <code>111</code>","Comp part of a C-instruction. Format is this: â€¦","D register","","","","D register and RAM[A]","","","","","","","","","Where to store <code>Comp</code>. Format is this: <code>**** **** **dd d***</code>","Jump if <code>comp == 0</code>","Jump if <code>comp &gt;= 0</code>","Jump if <code>comp &gt; 0</code>","Jump part of a C-instruction. Format is: â€¦","Unconditional jump","","Jump if <code>comp &lt;= 0</code>","Jump if <code>comp &lt; 0</code>","RAM[A]","","","","","","","","","Jump if <code>comp != 0</code>","No jump","","","","Value is not stored","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The Add16 chip is able to add two 16-bit numbers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a + b</code> (overflowing â€¦","","","","Arithmetic Logic Unit","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Carries out the ALU simulation.","","","","The AND gate is built using a NOT and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a AND b</code>","","","","Similar to the AND gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The Demultiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","4-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","8-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","","Arithmetic Logic Unit","","","","","False selects the &amp; functionTrue selects the + function","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Whether the output is negative","Negates the output","Negates x input","","","","","","Carries out the ALU simulation.","","","","","","Whether the output is zero","Set x input to zero","Set y input to zero","By means of two Half-adders, the Full-adder is able to add â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation but computing <code>a + b + c</code> and â€¦","","","","The Half-adder chip is able to add together 2 binary â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation but computing <code>a + b</code> and returns â€¦","","","","The Inc16 chip is able to add 1 to a given number.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>inp + 1</code> â€¦","","","","The Multiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>sel ? b : a</code>","","","","Similar to the Mux gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Carries out the simulation and returns <code>sel ? b : a</code> over â€¦","","","","4-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation and returns","","","","8-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation and returns","","","","The NAND gate is the only built-in logic component","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a NAND b</code>","","","","Similar to the Nand gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The NOT gate is built using a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>NOT inp</code>","","","","Similar to the Not gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The OR gate is built using two NOTs and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a OR b</code>","","","","Similar to the Or gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","16-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","8-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","12 signals into one","All signals <code>HI</code>","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","13 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","14 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","15 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","16 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","All signals <code>LO</code>","","","","","2 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","3 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","6 signals into one","All signals <code>HI</code>","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","8 signals into one","All signals <code>HI</code>","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","9 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Common operations for a logic unit.","Evaluates the logic expression as we do with arithmetic â€¦","Carries out the tick-phase of a clock cycle: LOW","Carries out the tock-phase of a clock cycle: HIGH","The XOR gate is built using a NAND, an OR, and an AND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a XOR b</code>","","","","","","","","","","","","","","","Single-bit register, storing <code>0</code> or <code>1</code> over time.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","Memory device which can increment its value in every time â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation, taking as input:","","","","","","Data Flip-Flop","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>inp</code> at <code>t-1</code>","","","","","","","","","","","","","Fast memory device which can increment its value in every â€¦","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast 16-bit register which, as opposed to the other â€¦","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 16k 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 4k 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 512 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 64 16-bit register (8 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 8 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","16-bit register, behaving exactly like a 1-bit register, â€¦","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","","Helper class for keeping track of time, advancing every â€¦","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","A VmCode unit represents a file with VM instructions","","","VM instructions read from the file","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Name of the file","","","","","This emulator implements all the VM commands with Rust â€¦","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Loads a program into the emulator","Pops and returns the topmost element of the stack","Pops an element from the stack and stores it into â€¦","Pushes <code>value</code> on top of the stack","Pushes <code>segment[offset]</code> on top of the stack","","","Fetches the next instruction and executes it","","","","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x + y</code>","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x &amp; y</code>","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x == y</code>","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x &gt; y</code>","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x &lt; y</code>","Pops <code>x</code>, and pushes <code>-x</code>","Pops <code>x</code>, and pushes <code>~x</code> (bitwise not)","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x | y</code>","Pops an element from the stack and stores it into â€¦","Pushes <code>segment[index]</code> on top of the stack","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x - y</code>","Sort of <em>intermediate code</em> designed to run on a stack â€¦","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Processes one or more VM code units into a vector of â€¦","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Arg address in RAM[2]","Actually not a memory segment","Local address in RAM[1]","Fixed memory segment pushing only 0 or 1 (THIS, THAT)","Helper registers for the VM translator","","","","Stack pointer address is at RAM[0]","Starts at RAM[16], ends at RAM[255] included","8-place segment from RAM[5] to RAM[12]","That address in RAM[4]","This address in RAM[3]","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Translates VM instructions into a sequence of low-level â€¦","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Translates a VM program into a sequence of assembly â€¦","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,2,2,2,2,2,2,2,2,2,2,2,2,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,26,26,26,26,26,26,26,26,26,26,26,26,4,28,29,28,28,28,29,29,29,0,4,0,28,29,29,29,28,29,29,29,29,29,29,29,29,0,30,30,30,0,30,4,30,30,28,29,29,29,29,29,29,29,29,30,30,29,29,29,28,29,4,29,28,4,28,29,30,4,28,29,30,4,28,29,30,4,28,29,30,4,4,28,29,30,4,4,28,29,30,4,4,28,28,29,29,30,30,4,28,29,30,4,28,29,30,4,28,29,30,4,4,28,29,30,4,28,29,30,4,28,29,30,4,28,29,30,97,98,99,100,98,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,0,38,38,38,38,38,38,38,38,38,38,0,39,39,39,39,39,39,39,39,39,39,0,41,41,41,41,41,41,41,41,41,41,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,0,45,45,45,45,45,45,45,45,45,45,45,0,46,46,46,46,46,46,46,46,46,46,46,0,47,47,47,47,47,47,47,47,47,47,0,48,48,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,49,0,50,50,50,50,50,50,50,50,50,50,50,0,51,51,51,51,51,51,51,51,51,51,0,52,52,52,52,52,52,52,52,52,52,0,53,53,53,53,53,53,53,53,53,53,0,54,54,54,54,54,54,54,54,54,54,0,55,55,55,55,55,55,55,55,55,55,0,56,56,56,56,56,56,56,56,56,56,0,57,57,57,57,57,57,57,57,57,57,0,58,58,58,58,58,58,58,58,58,58,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,65,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,25,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,66,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,40,40,40,40,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,70,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,59,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,71,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,101,101,101,0,72,72,72,72,72,72,72,72,72,72,0,0,0,0,0,0,0,0,0,0,0,0,73,73,73,73,73,73,73,73,73,73,73,73,73,0,74,74,74,74,74,74,74,74,74,74,74,74,74,0,75,75,75,75,75,75,75,75,75,75,75,75,0,0,0,0,0,0,0,0,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,83,83,83,83,83,83,83,83,83,83,83,83,0,84,84,84,84,84,84,84,84,84,84,84,84,0,85,85,85,85,85,85,85,85,85,85,85,85,0,86,86,86,86,86,86,86,86,86,86,86,86,0,87,87,87,87,87,87,87,87,87,87,87,87,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,0,89,89,89,89,89,89,89,89,89,89,89,89,0,0,0,0,0,0,0,90,90,90,90,90,90,90,90,90,90,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,0,92,92,92,92,92,92,92,92,92,92,92,92,102,103,102,103,0,0,95,94,95,94,94,95,95,94,95,94,95,94,94,95,94,94,95,94,95,94,95,94,93,93,93,93,93,93,93,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,96,96,96,96,96,96,96,96,96,96,96,96,96],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[1],[[]],[1,2],[1,3],[[]],[1],[[1,[5,[4]]]],[1],[1],[[],6],[[],6],[[],7],0,[[]],[[]],[[],8],[8],[[]],[8,9],[8,10],[8,10],[8,11],[[]],[[8,10,10,11]],[8],[8],[[],6],[[],6],[[],7],0,0,0,0,0,[[]],[[]],0,[[],12],[12],[[]],[12,9],[12,10],[12,10],[12,11],0,0,[[]],0,0,0,[[12,10,10,11]],[12],[12],[[],6],[[],6],[[],7],0,0,0,[[]],[[]],[[],13],[13],[[]],[13,2],[13,3],0,[[]],0,0,[13,10],0,0,0,0,[[13,10,11,9],10],[13],[[],6],[[],6],[[],7],0,[[]],[[]],[[],2],[2],[[]],[[]],[2,10],[[2,14]],[[],6],[[],6],[[],7],[[2,14]],0,0,[[]],[[]],[[],15],[15],[[]],[15,2],[15,3],0,[[]],0,[15,10],[[15,10,11,9],10],[15],[[],6],[[],6],[[],7],0,[[]],[[]],[[],16],[16],[[]],[[]],[16,10],[[16,[17,[9]]]],[[16,[5,[4]]]],[[16,9],10],[[],6],[[],6],[[],7],0,[3],[[]],[[]],[[],3],[[3,[19,[18]]],[[6,[[21,[20]]]]]],[3],[[]],[3,22],[[3,23,23],24],[3,22],[[]],[3,10],[[3,[17,[25]]]],[[3,10,11,25],10],[3],[[],6],[[],6],[[],7],0,0,0,[[26,[19,[27]]],[[5,[4]]]],[[]],[[]],[[],26],[[]],[[]],[[],26],[[26,[5,[4]]],[[5,[4]]]],[[[5,[27]]],[[5,[4]]]],[[],6],[[],6],[[],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[28,28]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[28,28],[29,29],[30,30],[[]],[[]],[[]],[[]],[[],4],[[4,4],31],[[28,28],31],[[29,29],31],[[30,30],31],[[4,32],33],[[4,32],33],[[28,32],33],[[29,32],33],[[30,32],33],[24,4],[[]],[24,28],[[]],[[]],[24,29],[[]],[24,30],[27,[[6,[4]]]],[27,[[6,[28]]]],[27,[[6,[29]]]],[27,[[6,[30]]]],[4],[28],[29],[30],[[]],[[]],[[]],[[]],[[4,4],31],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],34],[34],[[]],[[]],[[34,10,10],10],[[],6],[[],6],[[],7],0,[[]],[[]],[[],35],[35],[[]],[[]],[35,10],[[35,10]],[[35,10]],[[35,10,10,11,11,11,11,11,11]],[[],6],[[],6],[[],7],0,[[]],[[]],[[],36],[36],[[]],[[]],[[36,11,11],11],[[],6],[[],6],[[],7],0,[[]],[[]],[[],37],[37],[[]],[[]],[[37,10,10],10],[[],6],[[],6],[[],7],0,[[]],[[]],[[],38],[38],[[]],[[]],[[38,11,11]],[[],6],[[],6],[[],7],0,[[]],[[]],[[],39],[39],[[]],[[]],[[39,11,40]],[[],6],[[],6],[[],7],0,[[]],[[]],[[],41],[41],[[]],[[]],[[41,11,42]],[[],6],[[],6],[[],7],0,0,[[]],[[]],[[],43],[43],0,[[]],[[]],0,0,0,0,[43,10],0,[[43,10]],[[43,10]],[[43,10,10,11,11,11,11,11,11]],[[],6],[[],6],[[],7],0,0,0,0,0,0,[[]],[[]],[[],44],[44],[[]],[[]],[[44,11,11,11]],[[],6],[[],6],[[],7],0,[[]],[[]],[[],45],[45],[[]],[[]],[[11,11],45],[[45,11,11]],[[],6],[[],6],[[],7],0,[[]],[[]],[[],46],[46],[[]],[46,10],[[]],[[46,10],10],[[],6],[[],6],[[],7],0,[[]],[[]],[[],47],[47],[[]],[[]],[[47,11,11,11],11],[[],6],[[],6],[[],7],0,[[]],[[]],[[],48],[48],[[]],[[]],[48,10],[[48,10]],[[48,10,10,11],10],[[],6],[[],6],[[],7],0,[[]],[[]],[[],49],[49],[[]],[[]],[49,40],[[49,40],10],[[],6],[[],6],[[],7],0,[[]],[[]],[[],50],[50],[[]],[[]],[50,42],[[50,42],10],[[],6],[[],6],[[],7],0,[[]],[[]],[[],51],[51],[[]],[[]],[[51,11,11],11],[[],6],[[],6],[[],7],0,[[]],[[]],[[],52],[52],[[]],[[]],[[52,10,10],10],[[],6],[[],6],[[],7],0,[[]],[[]],[[],53],[53],[[]],[[]],[[53,11],11],[[],6],[[],6],[[],7],0,[[]],[[]],[[],54],[54],[[]],[[]],[[54,10],10],[[],6],[[],6],[[],7],0,[[]],[[]],[[],55],[55],[[]],[[]],[[55,11,11],11],[[],6],[[],6],[[],7],0,[[]],[[]],[[],56],[56],[[]],[[]],[[56,10,10],10],[[],6],[[],6],[[],7],0,[[]],[[]],[[],57],[57],[[]],[[]],[[57,10],11],[[],6],[[],6],[[],7],0,[[]],[[]],[[],58],[58],[[]],[[]],[[58,59],11],[[],6],[[],6],[[],7],0,0,0,[11,31],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[]],[[]],[11,11],[[]],[[],11],[[11,60],31],[[11,11],31],[[11,32],33],[[11,32],33],[24,11],[[]],[31,11],[60,11],[61,11],[62,11],[63,11],[[]],[60,11],[11],[[]],[[],64],[[],6],[[],6],[[],7],0,0,0,[[65,65]],[[]],[[]],[65,65],[[]],[[],65],[[65,65],31],[[65,32],33],[[65,32],33],[9,65],[[]],[62,65],[66,65],[63,65],[[65,[67,[23]]],63],[[]],[63,65],[65],[[]],[[],64],[[],6],[[],6],[[],7],0,0,0,[[25,25]],[[]],[[]],[25,25],[[]],[[],25],[[25,25],31],[[25,32],33],[[25,32],33],[[]],[9,25],[62,25],[63,25],[[25,[67,[23]]],63],[[]],[63,25],[25],[[]],[[],64],[[],6],[[],6],[[],7],0,0,0,0,[[66,66]],[[]],[[]],[66,66],[[]],[[],66],[[66,66],31],[[66,32],33],[[66,32],33],[62,66],[63,66],[9,66],[[]],[[66,[67,[23]]],63],[[]],[[66,66],31],[63,66],[66],[[]],[[],64],[[],6],[[],6],[[],7],0,0,0,0,[[9,9]],[[]],[[]],[9,9],[[]],[[],9],[[9,9],31],[[9,32],33],[[9,32],33],[[]],[63,9],[62,9],[10,9],[[9,[67,[23]]],63],[[]],[[9,9],31],[63,9],[9],[[]],[[],64],[[],6],[[],6],[[],7],0,0,0,0,[[10,63]],[[10,10]],[[10,63]],[[10,10]],[[10,10]],[[]],[[]],[10,10],[[]],[[],10],[[10,10],31],[[10,32],33],[[10,32],33],[11,10],[9,10],[4,10],[31,10],[63,10],[24,10],[62,10],[[]],[[10,[67,[23]]],63],[[]],[10],[63,10],[10],[[10,10],[[69,[68]]]],[[10,23,11]],[[10,10]],[[10,63]],[[10,63]],[[]],[[],64],[[],6],[[],6],[[],7],0,0,0,0,0,0,0,0,[[40,40]],[[]],[[]],[40,40],[[]],[[],40],[[40,40],31],[[40,32],33],[[40,32],33],[[]],[42,40],[62,40],[24,40],[63,40],[60,40],[[40,23],60],[[]],[60,40],[40],[[]],[[],64],[[],6],[[],6],[[],7],0,0,0,[[42,42]],[[]],[[]],[42,42],[[]],[[],42],[[42,42],31],[[42,32],33],[[42,32],33],[63,42],[70,42],[24,42],[61,42],[60,42],[62,42],[[]],[[42,23],60],[[]],[[42,42],31],[60,42],[42],[[]],[[],64],[[],6],[[],6],[[],7],0,0,0,[70,61],[70,23],[[70,70]],[[]],[[]],[70,70],[[]],[[],70],[[70,70],31],[[70,32],33],[[70,32],33],[[]],[71,70],[62,70],[61,70],[[70,[67,[23]]],60],[[]],[60,70],[70],[[]],[[],64],[[],6],[[],6],[[],7],0,0,0,0,[[59,59]],[[]],[[]],[59,59],[[]],[[],59],[[59,59],31],[[59,32],33],[[59,32],33],[62,59],[[]],[24,59],[63,59],[61,59],[[59,23],60],[[]],[[59,59],31],[60,59],[59],[[]],[[],64],[[],6],[[],6],[[],7],0,0,0,0,[[71,71]],[[]],[[]],[71,71],[[]],[[],71],[[71,71],31],[[71,32],33],[[71,32],33],[65,71],[62,71],[63,71],[[]],[[71,[67,[23]]],63],[[]],[63,71],[71],[[]],[[],64],[[],6],[[],6],[[],7],0,[[]],[[]],[[]],0,[[]],[[]],[[],72],[72],[[]],[[]],[[72,11,11],11],[[],6],[[],6],[[],7],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],73],[73],[[]],[73,11],[[]],[[73,11,11],11],[73],[73],[[],6],[[],6],[[],7],0,[[]],[[]],[[],74],[74],[[]],[[]],[74,10],[[74,10,11,11,11],10],[74],[74],[[],6],[[],6],[[],7],0,[[]],[[]],[[],75],[75],[[]],[75,11],[[]],[[75,11],11],[75],[[],6],[[],6],[[],7],0,0,0,0,0,0,0,0,0,[[]],[[]],[[],76],[76],[[]],0,0,[[]],0,[76,10],0,0,[[76,10,11,11,11],10],[76],[76],[[],6],[[],6],[[],7],0,[[]],[[]],0,[[],77],[77],[[]],[[]],[77,10],[[77,[17,[66]]]],[[77,[17,[10]]]],[[77,[17,[11]]]],[[77,10,11,[17,[66]]],10],[77],[[],6],[[],6],[[],7],0,[[]],[[]],0,[[],78],[78],[[]],[[]],[78,10],[[78,[17,[65]]]],[[78,[17,[10]]]],[[78,[17,[11]]]],[[78,10,11,[17,[65]]],10],[78],[[],6],[[],6],[[],7],0,[[]],[[]],0,[[],79],[79],[[]],[[]],[79,10],[[79,[17,[71]]]],[[79,[17,[10]]]],[[79,[17,[11]]]],[[79,10,11,[17,[71]]],10],[79],[[],6],[[],6],[[],7],0,[[]],[[]],0,[[],80],[80],[[]],[[]],[80,10],[[80,[17,[70]]]],[[80,[17,[10]]]],[[80,[17,[11]]]],[[80,10,11,[17,[70]]],10],[80],[[],6],[[],6],[[],7],0,[[]],[[]],0,[[],81],[81],[[]],[[]],[81,10],[[81,[17,[42]]]],[[81,[17,[10]]]],[[81,[17,[11]]]],[[81,10,11,[17,[42]]],10],[81],[[],6],[[],6],[[],7],0,[[]],[[]],[[],82],[82],[[82,32],33],[62,82],[[]],[[]],[82,10],[82],[[82,10,11],10],[[],64],[82,10],[[],6],[[],6],[[],7],0,[[]],[[]],[[],83],[83],[[]],[[]],[[83,10,11,66],10],[83],[83],[[],6],[[],6],[[],7],0,[[]],[[]],[[],84],[84],[[]],[[]],[[84,10,11,65],10],[84],[84],[[],6],[[],6],[[],7],0,[[]],[[]],[[],85],[85],[[]],[[]],[[85,10,11,71],10],[85],[85],[[],6],[[],6],[[],7],0,[[]],[[]],[[],86],[86],[[]],[[]],[[86,10,11,70],10],[86],[86],[[],6],[[],6],[[],7],0,[[]],[[]],[[],87],[87],[[]],[[]],[[87,10,11,42],10],[87],[87],[[],6],[[],6],[[],7],0,[[]],[[]],[[],88],[88],[[88,32],33],[[]],[62,88],[88,10],[[]],[[88,10,11],10],[88],[[],64],[88],[[],6],[[],6],[[],7],0,[[89,23]],[[]],[[]],[[],89],[[89,32],33],[62,89],[[]],[[]],[[],64],[[],6],[[],6],[[],7],0,0,0,0,0,0,0,[[]],[[]],0,[[]],[[]],0,[[[17,[64]],[17,[64]]],90],[[],6],[[],6],[[],7],0,[[]],[[]],[[],91],[[]],[[]],[[91,[5,[92]]]],[91,10],[[91,93,10]],[[91,10]],[[91,93,10]],0,[[91,93,10]],[91],[[],6],[[],6],[[],7],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[92,92],[[]],[[92,32],33],[[]],[27,[[6,[92]]]],[[]],[[]],[[],6],[[],6],[[],7],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[94,95],[[],94],[[],95],[[],94],[[]],[[]],[95,[[5,[64]]]],[[94,90],94],[[94,[5,[90]]],94],[[]],[[]],0,[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[93,93],[[]],[[93,32],33],[[]],[27,[[6,[93]]]],[93,23],[[]],[[]],[[],6],[[],6],[[],7],0,[[]],[[]],[[],96],[[]],[[],[[5,[4]]]],[[],[[5,[4]]]],[[],[[5,[4]]]],[[],[[5,[4]]]],[[]],[[96,[5,[92]]],[[5,[4]]]],[[],6],[[],6],[[],7]],"p":[[3,"Computer"],[3,"Keyboard"],[3,"Screen"],[4,"AsmInstruction"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"Cpu"],[3,"Signal15"],[3,"Signal16"],[4,"Signal"],[3,"Cpu"],[3,"Memory"],[4,"Keycode"],[3,"Memory"],[3,"Rom32k"],[8,"Into"],[3,"Path"],[8,"AsRef"],[8,"Error"],[3,"Box"],[15,"u32"],[15,"usize"],[15,"u16"],[3,"Signal13"],[3,"Assembler"],[15,"str"],[4,"Dest"],[4,"Comp"],[4,"Jump"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Add16"],[3,"Alu"],[3,"And"],[3,"And16"],[3,"Demux"],[3,"Demux4Way"],[4,"Signal2"],[3,"Demux8Way"],[3,"Signal3"],[3,"Alu"],[3,"FullAdder"],[3,"HalfAdder"],[3,"Inc16"],[3,"Mux"],[3,"Mux16"],[3,"Mux4Way16"],[3,"Mux8Way16"],[3,"Nand"],[3,"Nand16"],[3,"Not"],[3,"Not16"],[3,"Or"],[3,"Or16"],[3,"Or16Way"],[3,"Or8Way"],[3,"Signal8"],[15,"i8"],[15,"u8"],[15,"i32"],[15,"i16"],[3,"String"],[3,"Signal12"],[3,"Signal14"],[3,"Range"],[4,"Ordering"],[4,"Option"],[3,"Signal6"],[3,"Signal9"],[3,"Xor"],[3,"Bit"],[3,"Counter"],[3,"Dff"],[3,"Counter"],[3,"Ram16k"],[3,"Ram4k"],[3,"Ram512"],[3,"Ram64"],[3,"Ram8"],[3,"Register16"],[3,"Ram16k"],[3,"Ram4k"],[3,"Ram512"],[3,"Ram64"],[3,"Ram8"],[3,"Register16"],[3,"Time"],[3,"VmCode"],[3,"VmEmulator"],[4,"VmInstruction"],[4,"Segment"],[3,"VmPreprocessedCodeBuilder"],[3,"VmPreprocessedCode"],[3,"VmTranslator"],[13,"A"],[13,"C"],[13,"Label"],[13,"Symbol"],[8,"Unit"],[13,"Push"],[13,"Pop"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

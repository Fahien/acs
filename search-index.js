var searchIndex = JSON.parse('{\
"acs":{"doc":"Acs is an experimental project for learning computer â€¦","tn":["arch","asm","cal","logic","mem","vm","computer","cpu","fast","keyboard","memory","rom32k","screen","Computer","borrow","borrow_mut","default","eval","from","get_keyboard_mut","get_memory","get_memory_mut","get_screen","into","reset","set_instructions","tick","ticktock","tock","try_from","try_into","type_id","Cpu","borrow","borrow_mut","default","eval","from","get_address_m","get_out_m","get_pc","get_write_m","into","sim","tick","tock","try_from","try_into","type_id","cpu","memory","Cpu","a_register","address_m","borrow","borrow_mut","d_register","default","eval","from","get_address_m","get_out_m","get_pc","get_write_m","in_m","instruction","into","out_m","pc","reset","sim","tick","tock","try_from","try_into","type_id","write_m","Memory","address","borrow","borrow_mut","default","eval","from","get_keyboard_mut","get_screen","inp","into","keyboard","load","out","out","ram","screen","selected","sim","tick","try_from","try_into","type_id","Keyboard","borrow","borrow_mut","default","eval","from","into","out","set","try_from","try_into","type_id","Memory","address","borrow","borrow_mut","default","eval","from","get_keyboard_mut","get_screen","inp","into","load","out","sim","tick","try_from","try_into","type_id","Rom32k","borrow","borrow_mut","default","eval","from","get_index","get_instruction","into","out","set_address","set_instructions","sim","try_from","try_into","type_id","Screen","as_bytes","borrow","borrow_mut","default","dump","eval","from","get_height","get_pixel","get_width","into","out","set_address","sim","tick","try_from","try_into","type_id","assembler","instruction","Assembler","assemble","borrow","borrow_mut","default","from","into","new","resolve","translate","try_from","try_into","type_id","A","A","A","AD","AM","AMD","AMinusD","AMinusOne","APlusOne","AsmInstruction","C","Comp","D","D","DAndA","DAndM","DM","DMinusA","DMinusM","DMinusOne","DOrA","DOrM","DPlusA","DPlusM","DPlusOne","Dest","Eq","Ge","Gt","Jump","Jump","Label","Le","Lt","M","M","MMinusD","MMinusOne","MPlusOne","MinusA","MinusD","MinusM","MinusOne","Ne","No","NotA","NotD","NotM","Null","One","Symbol","Zero","bitor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","hash","hash","hash","hash","into","into","into","into","parse","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","0","1","2","compiler","error","expression","generator","parser","preamble","statement","structure","symboltable","tokenizer","Compile","compile","compile","CalError","borrow","borrow_mut","clone","clone_into","fmt","from","from","from_str","into","message","new","range","to_owned","try_from","try_into","type_id","Add","And","Array","Assign","Bool","Call","Char","Div","Eq","Expression","Gt","I16","Index","Literal","Literal","Lt","Mod","Mul","Ne","Operator","Or","Ref","Sub","Term","UnaryOp","UnaryOperator","Variable","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_symbol","from_symbol","into","into","into","into","into","new","op_and_expr","term","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","1","1","1","Generate","Generator","borrow","borrow_mut","default","from","gen","gen_assign_expression","gen_assign_expression_to_index","gen_assign_expression_to_variable","gen_copy_stack_into_index","gen_copy_stack_into_variable","gen_expression","gen_function","gen_if","gen_let","gen_module","gen_return","gen_statement","gen_statements","gen_while","generate","generate","into","try_from","try_into","type_id","Parser","borrow","borrow_mut","from","into","new","parse","parse_expression","parse_function","parse_if","parse_let","parse_module","parse_parameters","parse_statement","parse_statements","parse_while","try_from","try_into","type_id","preamble","Expression","If","IfStatement","Let","Return","Statement","While","WhileStatement","body","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","else_branch","eq","eq","eq","fmt","fmt","fmt","from","from","from","if_branch","into","into","into","new","new","predicate","predicate","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","0","0","1","Array","Bool","Char","Field","Function","I16","Module","Ref","StructDec","Type","Variable","Void","body_statements","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fields","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_keyword","from_str","functions","into","into","into","into","into","into","name","name","name","name","name","new","new","new","parameters","return_type","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","0","0","1","SymbolEntry","SymbolTable","borrow","borrow","borrow_mut","borrow_mut","default","from","from","get","get_segment_and_offset","insert_argument","insert_local","into","into","new","offset","segment","try_from","try_from","try_into","try_into","type_id","type_id","variable","Ampersand","Assign","Asterisk","Bool","Char","Char","Colon","Comma","Else","Eq","False","Function","Gt","I16","Identifier","If","Integer","Keyword","Keyword","LeftBrace","LeftBracket","LeftParen","Let","Lt","MAP","Minus","Ne","Percent","Plus","Range","Return","RightArrow","RightBrace","RightBracket","RightParen","Semicolon","Slash","Symbol","Symbol","Token","TokenKind","Tokenize","Tokens","True","VerticalBar","While","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","deref","deref_mut","eat_character","eat_identifier","eat_integer","eat_keyword","eat_symbol","end","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","into","into","into","into","into","into","new","new","new","peek_keyword","peek_operator","peek_symbol","range","skip","start","to_owned","to_owned","to_owned","to_owned","to_owned","tokenize","tokenize","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","0","0","0","0","0","add16","alu","and","and16","demux","demux4way","demux8way","fast","fulladder","halfadder","inc16","mux","mux16","mux4way16","mux8way16","nand","nand16","not","not16","or","or16","or16way","or8way","signal","signal12","signal13","signal14","signal15","signal16","signal2","signal3","signal6","signal8","signal9","unit","xor","Add16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Alu","borrow","borrow_mut","default","eval","from","into","out","set_x","set_y","sim","try_from","try_into","type_id","And","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","And16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux4Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","alu","Alu","borrow","borrow_mut","default","eval","f","from","into","ng","no","nx","ny","out","out","set_x","set_y","sim","try_from","try_into","type_id","x","y","zr","zx","zy","FullAdder","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HalfAdder","borrow","borrow_mut","default","eval","from","into","new","sim","try_from","try_into","type_id","Inc16","borrow","borrow_mut","default","eval","from","get_out","into","sim","try_from","try_into","type_id","Mux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux16","borrow","borrow_mut","default","eval","from","into","out","set_a","sim","try_from","try_into","type_id","Mux4Way16","borrow","borrow_mut","default","eval","from","into","sel","sim","try_from","try_into","type_id","Mux8Way16","borrow","borrow_mut","default","eval","from","into","sel","sim","try_from","try_into","type_id","Nand","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Nand16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HI","LO","Signal","as_bool","bitand","bitand_assign","bitor","bitor_assign","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal12","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal13","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal14","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal15","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal16","TRUE","add","add","add_assign","bitand","bitor","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","get","get_values","get_values_mut","into","neg","new","not","partial_cmp","set","sub","sub","sub","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id","values","FALSE","HIHI","HILO","LOHI","LOLO","Signal2","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal3","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal6","TRUE","as_u8","as_usize","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal8","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal9","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","Unit","eval","tick","tock","Xor","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","bit","counter","dff","fast","ram16k","ram4k","ram512","ram64","ram8","register16","time","Bit","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","tock","try_from","try_into","type_id","Counter","borrow","borrow_mut","default","eval","from","into","out","sim","tick","tock","try_from","try_into","type_id","Dff","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","try_from","try_into","type_id","counter","ram","ram16k","ram4k","ram512","ram64","ram8","register16","Counter","borrow","borrow_mut","default","eval","from","inc","inp","into","load","out","out","reset","sim","tick","tock","try_from","try_into","type_id","Ram16k","borrow","borrow_mut","data","default","eval","from","index","index_mut","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram4k","borrow","borrow_mut","data","default","eval","from","index","index_mut","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram512","borrow","borrow_mut","data","default","eval","from","index","index_mut","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram64","borrow","borrow_mut","data","default","eval","from","index","index_mut","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram8","borrow","borrow_mut","data","default","eval","from","index","index_mut","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Register16","borrow","borrow_mut","default","eval","fmt","from","from","into","out","run","sim","to_string","tock","try_from","try_into","type_id","Ram16k","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram4k","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram512","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram64","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram8","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Register16","borrow","borrow_mut","default","eval","fmt","from","from","get_out","into","sim","tick","to_string","tock","try_from","try_into","type_id","Time","add_assign","borrow","borrow_mut","default","fmt","from","from","into","to_string","try_from","try_into","type_id","code","emulator","instruction","preprocessor","segment","translator","VmCode","borrow","borrow_mut","code","from","into","name","new","try_from","try_into","type_id","VmEmulator","borrow","borrow_mut","default","from","get_segment_address","into","load","pop","pop_into","push","push_from","ram","set","step","try_from","try_into","type_id","Add","And","Call","Eq","Function","Goto","Gt","IfGoto","Label","Lt","Neg","Not","Or","Pop","Push","Return","Sub","VmInstruction","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_str","into","parse","to_owned","try_from","try_into","type_id","0","0","0","0","0","0","0","0","1","1","1","1","VmPreprocessedCode","VmPreprocessedCodeBuilder","borrow","borrow","borrow_mut","borrow_mut","build","builder","default","default","from","from","get_lines","include","include_all","into","into","lines","try_from","try_from","try_into","try_into","type_id","type_id","Argument","Constant","Local","Pointer","R13","R14","R15","Segment","Stack","Static","Temp","That","This","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_str","get_base_address","into","to_owned","try_from","try_into","type_id","VmTranslator","borrow","borrow_mut","default","from","gen_add","gen_neg","gen_not","gen_sub","into","translate","translate","try_from","try_into","type_id"],"q":["acs","","","","","","acs::arch","","","","","","","acs::arch::computer","","","","","","","","","","","","","","","","","","","acs::arch::cpu","","","","","","","","","","","","","","","","","acs::arch::fast","","acs::arch::fast::cpu","","","","","","","","","","","","","","","","","","","","","","","","","","acs::arch::fast::memory","","","","","","","","","","","","","","","","","","","","","","","acs::arch::keyboard","","","","","","","","","","","","acs::arch::memory","","","","","","","","","","","","","","","","","","acs::arch::rom32k","","","","","","","","","","","","","","","","acs::arch::screen","","","","","","","","","","","","","","","","","","","acs::asm","","acs::asm::assembler","","","","","","","","","","","","","acs::asm::instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::asm::instruction::AsmInstruction","","","","","","acs::cal","","","","","","","","","","acs::cal::compiler","","","acs::cal::error","","","","","","","","","","","","","","","","","acs::cal::expression","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::cal::expression::Literal","","","","acs::cal::expression::Term","","","","","","","","acs::cal::generator","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::cal::parser","","","","","","","","","","","","","","","","","","","acs::cal::preamble","acs::cal::statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::cal::statement::Statement","","","","","","acs::cal::structure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::cal::structure::Type","","","acs::cal::symboltable","","","","","","","","","","","","","","","","","","","","","","","","","acs::cal::tokenizer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::cal::tokenizer::TokenKind","","","","","acs::logic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::add16","","","","","","","","","","","acs::logic::alu","","","","","","","","","","","","","","acs::logic::and","","","","","","","","","","","acs::logic::and16","","","","","","","","","","","acs::logic::demux","","","","","","","","","","","acs::logic::demux4way","","","","","","","","","","","acs::logic::demux8way","","","","","","","","","","","acs::logic::fast","acs::logic::fast::alu","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::fulladder","","","","","","","","","","","acs::logic::halfadder","","","","","","","","","","","","acs::logic::inc16","","","","","","","","","","","","acs::logic::mux","","","","","","","","","","","acs::logic::mux16","","","","","","","","","","","","","acs::logic::mux4way16","","","","","","","","","","","","acs::logic::mux8way16","","","","","","","","","","","","acs::logic::nand","","","","","","","","","","","acs::logic::nand16","","","","","","","","","","","acs::logic::not","","","","","","","","","","","acs::logic::not16","","","","","","","","","","","acs::logic::or","","","","","","","","","","","acs::logic::or16","","","","","","","","","","","acs::logic::or16way","","","","","","","","","","","acs::logic::or8way","","","","","","","","","","","acs::logic::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal12","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal13","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal14","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal15","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal16","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal3","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal6","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal8","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal9","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::unit","","","","acs::logic::xor","","","","","","","","","","","acs::mem","","","","","","","","","","","acs::mem::bit","","","","","","","","","","","","","","acs::mem::counter","","","","","","","","","","","","","","acs::mem::dff","","","","","","","","","","","","","acs::mem::fast","","","","","","","","acs::mem::fast::counter","","","","","","","","","","","","","","","","","","","acs::mem::fast::ram16k","","","","","","","","","","","","","","","","","","","acs::mem::fast::ram4k","","","","","","","","","","","","","","","","","","","acs::mem::fast::ram512","","","","","","","","","","","","","","","","","","","acs::mem::fast::ram64","","","","","","","","","","","","","","","","","","","acs::mem::fast::ram8","","","","","","","","","","","","","","","","","","","acs::mem::fast::register16","","","","","","","","","","","","","","","","","acs::mem::ram16k","","","","","","","","","","","","","acs::mem::ram4k","","","","","","","","","","","","","acs::mem::ram512","","","","","","","","","","","","","acs::mem::ram64","","","","","","","","","","","","","acs::mem::ram8","","","","","","","","","","","","","acs::mem::register16","","","","","","","","","","","","","","","","","acs::mem::time","","","","","","","","","","","","","acs::vm","","","","","","acs::vm::code","","","","","","","","","","","acs::vm::emulator","","","","","","","","","","","","","","","","","","acs::vm::instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::vm::instruction::VmInstruction","","","","","","","","","","","","acs::vm::preprocessor","","","","","","","","","","","","","","","","","","","","","","","","acs::vm::segment","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::vm::translator","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","The computer consists of three parts:","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Loads instructions into the ROM","","Advances one cicle","","","","","Central Processing Unit able to execute a given â€¦","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","","","Fast Central Processing Unit able to execute a given â€¦","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","Carries out the simulation, taking as input:","","","","","","","Fast package of three 16-bit chip parts: <code>Ram16k</code>, <code>Screen</code>, â€¦","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","Carries out the simulation, taking as input:","","","","","Built-in register chip acting as a keyboard","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the 16-bit character code of the currently pressed â€¦","","","","","Package of three 16-bit chip parts: <code>Ram16k</code>, <code>Screen</code>, and â€¦","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","Instruction memory, preloaded with the required program.","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Carries out the simulation taking as input an address and â€¦","","","","512x256 black-and-white screen which behaves like a <code>Ram8k</code>.","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","","","The assembler translates programs written in asm language â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Resolves symbols in the assembly to physical memory â€¦","","","","","A-instructions start with <code>0</code>","A register","","A and D register","A register and <code>RAM[A]</code>","A and D register and <code>RAM[A]</code>","","","","","C-instructions start with <code>111</code>","Comp part of a C-instruction. Format is this: â€¦","D register","","","","D register and <code>RAM[A]</code>","","","","","","","","","Where to store <code>Comp</code>. Format is this: <code>**** **** **dd d***</code>","Jump if <code>comp == 0</code>","Jump if <code>comp &gt;= 0</code>","Jump if <code>comp &gt; 0</code>","Jump part of a C-instruction. Format is: â€¦","Unconditional jump","","Jump if <code>comp &lt;= 0</code>","Jump if <code>comp &lt; 0</code>","<code>RAM[A]</code>","","","","","","","","","Jump if <code>comp != 0</code>","No jump","","","","Value is not stored","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compiles Cal source code and returns a series of asm â€¦","Compiles Cal source code and returns a series of asm â€¦","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","<code>+</code>","<code>&amp;</code>","","<code>=</code>","","Call a function with a list of arguments","","<code>/</code>","","","","","Call the index operator on a variable, where index is the â€¦","An enum for literals will come in handy when defining â€¦","","","<code>%</code>","<code>*</code>","","","<code>|</code>","<code>&amp;</code>","<code>-</code>","","Apply an unary operator to the term to its right","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The term on the left may be followed by an operator and â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generates VM instructions from parsed code.","","","","Returns the argument unchanged.","Generates VM instructions for a series of modules","","","","Generates VM instructions to copy the stack backwards into â€¦","Generates VM instructions to copy the stack backwards into â€¦","","Generates VM instructions for a function","Generates VM instructions for an if statement","","Generates VM instructions for a module","","","","Generates VM instructions for a while statement","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","The preable is added at the beginning of the program","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","An array is defined by the <em>type</em> and the <em>number</em> of its â€¦","","","","","","","A reference is actually a pointer to an object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Each scope has its own symbol table, with its own number â€¦","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the segment and the offset of the variable with â€¦","Inserts a new argument variable in the symbol table and â€¦","Inserts a new local variable in the symbol table and â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","<code>&amp;</code>","<code>=</code>","<code>*</code>","","","","<code>:</code>,","<code>,</code>","","<code>==</code>","","","<code>&gt;</code>","","Sequence of letters, digits, and underscore, not starting â€¦","","","","","â€˜{â€™","<code>[</code>","â€˜(â€™","","<code>&lt;</code>","","<code>-</code>","<code>!=</code>","<code>%</code>","<code>+</code>","Useful for debugging errors in the code, the range will â€¦","","â€˜-&gt;â€™","â€˜}â€™","<code>]</code>","â€˜)â€™","<code>;</code>","<code>/</code>","","","Useful for lexical analysys, with the tokenizer we â€¦","We have various kinds of tokens","","This struct behaves like a peekable iterator of tokens â€¦","","<code>|</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","Eats a character and advances to the next token","Eats an identifier and advances to the next token","Eats an integer and advances to the next token","Eats a keyword and advances to the next token","Eats a symbol and advances to the next token","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Peeks the next token and returns whether it is that keyword","Peeks the next token and returns whether it is an operator","Peeks the next token and returns whether it is that symbol","","Skips the next token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The Add16 chip is able to add two 16-bit numbers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a + b</code> (overflowing â€¦","","","","Arithmetic Logic Unit","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Carries out the ALU simulation.","","","","The AND gate is built using a NOT and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a AND b</code>","","","","Similar to the AND gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The Demultiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","4-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","8-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","","Arithmetic Logic Unit","","","","","False selects the &amp; functionTrue selects the + function","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Whether the output is negative","Negates the output","Negates x input","","","","","","Carries out the ALU simulation.","","","","","","Whether the output is zero","Set x input to zero","Set y input to zero","By means of two Half-adders, the Full-adder is able to add â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation but computing <code>a + b + c</code> and â€¦","","","","The Half-adder chip is able to add together 2 binary â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation but computing <code>a + b</code> and returns â€¦","","","","The Inc16 chip is able to add 1 to a given number.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>inp + 1</code> â€¦","","","","The Multiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>sel ? b : a</code>","","","","Similar to the Mux gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Carries out the simulation and returns <code>sel ? b : a</code> over â€¦","","","","4-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation and returns","","","","8-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation and returns","","","","The NAND gate is the only built-in logic component","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a NAND b</code>","","","","Similar to the Nand gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The NOT gate is built using a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>NOT inp</code>","","","","Similar to the Not gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The OR gate is built using two NOTs and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a OR b</code>","","","","Similar to the Or gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","16-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","8-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","12 signals into one","All signals <code>HI</code>","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","13 signals into one","All signals <code>HI</code>","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","14 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","15 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","16 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","All signals <code>LO</code>","","","","","2 signals into one","All signals <code>HI</code>","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","3 signals into one","All signals <code>HI</code>","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","6 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","8 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","9 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Common operations for a logic unit.","Evaluates the logic expression as we do with arithmetic â€¦","Carries out the tick-phase of a clock cycle: LOW","Carries out the tock-phase of a clock cycle: HIGH","The XOR gate is built using a NAND, an OR, and an AND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a XOR b</code>","","","","","","","","","","","","","","","Single-bit register, storing <code>0</code> or <code>1</code> over time.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","Memory device which can increment its value in every time â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation, taking as input:","","","","","","Data Flip-Flop","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>inp</code> at <code>t-1</code>","","","","","","","","","","","","","Fast memory device which can increment its value in every â€¦","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast 16-bit register which, as opposed to the other â€¦","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 16k 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 4k 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 512 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 64 16-bit register (8 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 8 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","16-bit register, behaving exactly like a 1-bit register, â€¦","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","","Helper class for keeping track of time, advancing every â€¦","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","A VmCode unit represents a file with VM instructions","","","VM instructions read from the file","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Name of the file","","","","","This emulator implements all the VM commands with Rust â€¦","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Loads a program into the emulator","Pops and returns the topmost element of the stack","Pops an element from the stack and stores it into â€¦","Pushes <code>value</code> on top of the stack","Pushes <code>segment[offset]</code> on top of the stack","","","Fetches the next instruction and executes it","","","","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x + y</code>","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x &amp; y</code>","Calls the function with that name with the number of â€¦","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x == y</code>","Marks the beginning of a function with a name and the â€¦","Unconditional jump to the location marked by the label","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x &gt; y</code>","Pops topmost value from stack and, if it is not <code>0</code>, jumps â€¦","Marks current code location for jumping","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x &lt; y</code>","Pops <code>x</code>, and pushes <code>-x</code>","Pops <code>x</code>, and pushes <code>~x</code> (bitwise not)","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x | y</code>","Pops an element from the stack and stores it into â€¦","Pushes <code>segment[index]</code> on top of the stack","Jumps to the command following the <code>Call</code> command that â€¦","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x - y</code>","Sort of <em>intermediate code</em> designed to run on a stack â€¦","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Processes one or more VM code units into a vector of â€¦","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Arg address is at <code>RAM[2]</code>","Actually not a memory segment","Local address is at <code>RAM[1]</code>","Fixed memory segment pushing only <code>0</code> or <code>1</code> (<code>This</code>, <code>That</code>)","Helper registers for the VM translator","","","","Stack pointer address is at <code>RAM[0]</code>","Starts at <code>RAM[16]</code>, ends at <code>RAM[255]</code> included","8-place segment from <code>RAM[5]</code> to <code>RAM[12]</code>","That address is at <code>RAM[4]</code>","This address is at <code>RAM[3]</code>","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Translates VM instructions into a sequence of low-level â€¦","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Translates a VM program into a sequence of assembly â€¦","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,2,2,2,2,2,2,2,2,2,2,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,25,25,25,25,25,25,25,25,25,25,25,25,5,27,28,27,27,27,28,28,28,0,5,0,27,28,28,28,27,28,28,28,28,28,28,28,28,0,29,29,29,0,29,5,29,29,27,28,28,28,28,28,28,28,28,29,29,28,28,28,27,28,5,28,27,5,27,28,29,5,27,28,29,5,27,28,29,5,27,28,29,5,5,27,28,29,5,5,27,28,29,5,5,5,5,27,27,28,28,29,29,5,27,28,29,5,27,28,29,5,27,28,29,5,5,27,28,29,5,27,28,29,5,27,28,29,5,27,28,29,122,123,124,125,123,123,0,0,0,0,0,0,0,0,0,0,0,0,126,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,38,38,40,38,40,41,40,38,38,0,38,40,41,0,41,38,38,38,38,0,38,39,38,0,41,0,41,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,38,39,38,39,40,41,42,42,42,42,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,127,128,129,130,131,132,133,134,135,132,134,135,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,136,45,45,45,45,0,56,56,56,56,56,0,56,56,56,56,56,56,56,56,56,56,56,56,0,53,53,0,53,53,0,53,0,54,51,54,53,51,54,53,51,54,53,51,54,53,51,51,54,53,51,54,53,51,54,53,51,51,54,53,51,54,51,54,51,54,53,51,54,53,51,54,53,51,54,53,137,138,139,140,141,139,57,57,57,0,0,57,0,57,0,0,0,57,50,48,57,50,58,59,52,48,57,50,58,59,52,48,57,50,58,59,52,48,57,50,58,59,52,48,57,50,58,59,52,59,48,57,50,58,59,52,48,48,57,50,58,59,52,57,52,52,48,57,50,58,59,52,48,50,58,59,52,48,58,52,50,50,48,57,50,58,59,52,48,57,50,58,59,52,48,57,50,58,59,52,48,58,48,57,50,58,59,52,142,143,142,0,0,47,61,47,61,61,47,61,61,61,61,61,47,61,47,47,47,47,61,47,61,47,61,47,43,43,43,60,60,62,43,43,60,43,60,60,43,60,62,60,62,0,62,43,43,43,60,43,60,43,43,43,43,0,60,43,43,43,43,43,43,0,62,0,0,0,0,60,43,60,55,37,60,43,62,63,55,37,60,43,62,63,37,60,43,62,63,37,60,43,62,63,37,55,55,55,55,55,55,55,37,37,60,43,62,63,37,60,43,62,63,55,37,60,43,62,63,37,55,37,60,43,62,63,55,37,63,55,55,55,63,55,37,37,60,43,62,63,0,144,55,37,60,43,62,63,55,37,60,43,62,63,55,37,60,43,62,63,63,145,146,147,148,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,65,65,65,65,65,65,65,65,65,0,66,66,66,66,66,66,66,66,66,66,66,66,66,0,67,67,67,67,67,67,67,67,67,67,0,68,68,68,68,68,68,68,68,68,68,0,69,69,69,69,69,69,69,69,69,69,0,70,70,70,70,70,70,70,70,70,70,0,72,72,72,72,72,72,72,72,72,72,0,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,75,75,75,75,75,75,75,75,75,75,0,76,76,76,76,76,76,76,76,76,76,76,0,77,77,77,77,77,77,77,77,77,77,77,0,78,78,78,78,78,78,78,78,78,78,0,79,79,79,79,79,79,79,79,79,79,79,79,0,80,80,80,80,80,80,80,80,80,80,80,0,81,81,81,81,81,81,81,81,81,81,81,0,82,82,82,82,82,82,82,82,82,82,0,83,83,83,83,83,83,83,83,83,83,0,84,84,84,84,84,84,84,84,84,84,0,85,85,85,85,85,85,85,85,85,85,0,86,86,86,86,86,86,86,86,86,86,0,87,87,87,87,87,87,87,87,87,87,0,88,88,88,88,88,88,88,88,88,88,0,89,89,89,89,89,89,89,89,89,89,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,93,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,94,0,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,71,71,71,71,71,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,73,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,97,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,90,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,98,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,150,150,150,0,99,99,99,99,99,99,99,99,99,99,0,0,0,0,0,0,0,0,0,0,0,0,100,100,100,100,100,100,100,100,100,100,100,100,100,0,101,101,101,101,101,101,101,101,101,101,101,101,101,0,102,102,102,102,102,102,102,102,102,102,102,102,0,0,0,0,0,0,0,0,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,0,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,0,110,110,110,110,110,110,110,110,110,110,110,110,0,111,111,111,111,111,111,111,111,111,111,111,111,0,112,112,112,112,112,112,112,112,112,112,112,112,0,113,113,113,113,113,113,113,113,113,113,113,113,0,114,114,114,114,114,114,114,114,114,114,114,114,0,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,0,116,116,116,116,116,116,116,116,116,116,116,116,0,0,0,0,0,0,0,117,117,117,117,117,117,117,117,117,117,0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,151,152,153,154,155,156,157,158,151,152,156,157,0,0,120,119,120,119,119,120,120,119,120,119,120,119,119,120,119,119,120,119,120,119,120,119,49,49,49,49,49,49,49,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,121,121,121,121,121,121,121,121,121,0,121,121,121,121],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[1],[[]],[1,2],[1,3],[1,3],[1,4],[[]],[1],[[1,[6,[5]]]],[1],[1],[1],[[],7],[[],7],[[],8],0,[[]],[[]],[[],9],[9],[[]],[9,10],[9,11],[9,11],[9,12],[[]],[[9,11,11,12]],[9],[9],[[],7],[[],7],[[],8],0,0,0,0,0,[[]],[[]],0,[[],13],[13],[[]],[13,10],[13,11],[13,11],[13,12],0,0,[[]],0,0,0,[[13,11,11,12]],[13],[13],[[],7],[[],7],[[],8],0,0,0,[[]],[[]],[[],3],[3],[[]],[3,2],[3,4],0,[[]],0,0,[3,11],0,0,0,0,[[3,11,12,10],11],[3],[[],7],[[],7],[[],8],0,[[]],[[]],[[],2],[2],[[]],[[]],[2,11],[[2,11]],[[],7],[[],7],[[],8],0,0,[[]],[[]],[[],14],[14],[[]],[14,2],[14,4],0,[[]],0,[14,11],[[14,11,12,10],11],[14],[[],7],[[],7],[[],8],0,[[]],[[]],[[],15],[15],[[]],[15,16],[15,5],[[]],[15,11],[[15,[17,[10]]]],[[15,[6,[5]]]],[[15,10],11],[[],7],[[],7],[[],8],0,[4],[[]],[[]],[[],4],[[4,[19,[18]]],[[7,[[21,[20]]]]]],[4],[[]],[4,22],[[4,16,16],23],[4,22],[[]],[4,11],[[4,[17,[24]]]],[[4,11,12,24],11],[4],[[],7],[[],7],[[],8],0,0,0,[[25,[19,[26]]],[[6,[5]]]],[[]],[[]],[[],25],[[]],[[]],[[],25],[[25,[6,[5]]],[[6,[5]]]],[[[6,[26]]],[[6,[5]]]],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[27,27]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[27,27],[28,28],[29,29],[[]],[[]],[[]],[[]],[[],5],[[5,5],30],[[27,27],30],[[28,28],30],[[29,29],30],[[5,31],32],[[5,31],32],[[27,31],32],[[28,31],32],[[29,31],32],[33,5],[34,5],[[]],[23,5],[[]],[23,27],[[]],[23,28],[[]],[23,29],[26,[[7,[5]]]],[26,[[7,[27]]]],[26,[[7,[28]]]],[26,[[7,[29]]]],[5],[27],[28],[29],[[]],[[]],[[]],[[]],[26,[[6,[5]]]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[26,[[7,[[6,[5]],35]]]],[[],[[7,[[6,[5]],35]]]],0,[[]],[[]],[35,35],[[]],[[35,31],32],[36,35],[[]],[26,[[7,[35]]]],[[]],0,[[36,37],35],0,[[]],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,38],[39,39],[40,40],[41,41],[42,42],[[]],[[]],[[]],[[]],[[]],[[38,38],30],[[39,39],30],[[40,40],30],[[41,41],30],[[42,42],30],[[38,31],32],[[39,31],32],[[40,31],32],[[41,31],32],[[42,31],32],[[]],[[]],[[]],[[]],[[]],[43,[[7,[38,35]]]],[43,[[7,[39,35]]]],[[]],[[]],[[]],[[]],[[]],[[[21,[41]],44],42],0,0,[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],45],[[]],[45,[[7,[[6,[46]],35]]]],[[45,41,42],[[7,[[6,[46]],35]]]],[[45,26,42,42],[[7,[[6,[46]],35]]]],[[45,26,42],[[7,[[6,[46]],35]]]],[[45,47,42],[[7,[[6,[46]],35]]]],[[45,48,49,23],[[7,[[6,[46]],35]]]],[[45,42],[[7,[[6,[46]],35]]]],[[45,50],[[7,[[6,[46]],35]]]],[[45,51],[[7,[[6,[46]],35]]]],[[45,48,42],[[7,[[6,[46]],35]]]],[[45,52],[[7,[[6,[46]],35]]]],[[45,44],[[7,[[6,[46]],35]]]],[[45,53],[[7,[[6,[46]],35]]]],[45,[[7,[[6,[46]],35]]]],[[45,54],[[7,[[6,[46]],35]]]],[52,[[7,[[6,[46]],35]]]],[[],[[7,[[6,[46]],35]]]],[[]],[[],7],[[],7],[[],8],0,[[]],[[]],[[]],[[]],[55,56],[55,[[7,[52,35]]]],[[56,30],[[7,[42,35]]]],[56,[[7,[50,35]]]],[56,[[7,[53,35]]]],[56,[[7,[53,35]]]],[56,[[7,[52,35]]]],[56,[[7,[[6,[48]],35]]]],[56,[[7,[[44,[53]],35]]]],[56,[[7,[[6,[53]],35]]]],[56,[[7,[53,35]]]],[[],7],[[],7],[[],8],[[],[[6,[46]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[51,51],[54,54],[53,53],[[]],[[]],[[]],0,[[51,51],30],[[54,54],30],[[53,53],30],[[51,31],32],[[54,31],32],[[53,31],32],[[]],[[]],[[]],0,[[]],[[]],[[]],[[42,[6,[53]],[6,[53]]],51],[[42,[6,[53]]],54],0,0,[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48,48],[57,57],[50,50],[58,58],[59,59],[52,52],[[]],[[]],[[]],[[]],[[]],[[]],[[48,48],30],[[57,57],30],[[50,50],30],[[58,58],30],[[59,59],30],[[52,52],30],0,[[48,31],32],[[57,31],32],[[50,31],32],[[58,31],32],[[59,31],32],[[52,31],32],[[]],[36,48],[[]],[[]],[[]],[[]],[[]],[60,[[7,[57,35]]]],[26,[[7,[52]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[36,57],48],[[36,57],58],[[[17,[36]],[6,[50]]],52],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,[[]],[[]],[[]],[[]],[[],61],[[]],[[]],[[61,26],[[44,[47]]]],[[61,26],44],[[61,48]],[[61,48],23],[[]],[[]],[[48,49,23],47],0,0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37,37],[60,60],[43,43],[62,62],[63,63],[[]],[[]],[[]],[[]],[[]],[[],37],[55],[55],[[55,64],[[7,[35]]]],[[55,26],[[7,[35]]]],[[55,33],[[7,[35]]]],[[55,60],[[7,[35]]]],[[55,43],[[7,[35]]]],0,[[37,37],30],[[60,60],30],[[43,43],30],[[62,62],30],[[63,63],30],[[37,31],32],[[60,31],32],[[43,31],32],[[62,31],32],[[63,31],32],[[]],[[]],[[]],[[]],[[]],[[]],[[26,26],37],[[]],[[]],[[]],[[]],[[]],[[]],[26,[[7,[55,35]]]],[[16,16],37],[[62,37],63],[[55,60],30],[55,30],[[55,43],30],0,[55],0,[[]],[[]],[[]],[[]],[[]],[26,[[7,[55,35]]]],[[],[[7,[55,35]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],65],[65],[[]],[[]],[[65,11,11],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],66],[66],[[]],[[]],[66,11],[[66,11]],[[66,11]],[[66,11,11,12,12,12,12,12,12]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],67],[67],[[]],[[]],[[67,12,12],12],[[],7],[[],7],[[],8],0,[[]],[[]],[[],68],[68],[[]],[[]],[[68,11,11],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],69],[69],[[]],[[]],[[69,12,12]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],70],[70],[[]],[[]],[[70,12,71]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],72],[72],[[]],[[]],[[72,12,73]],[[],7],[[],7],[[],8],0,0,[[]],[[]],[[],74],[74],0,[[]],[[]],0,0,0,0,[74,11],0,[[74,11]],[[74,11]],[[74,11,11,12,12,12,12,12,12]],[[],7],[[],7],[[],8],0,0,0,0,0,0,[[]],[[]],[[],75],[75],[[]],[[]],[[75,12,12,12]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],76],[76],[[]],[[]],[[12,12],76],[[76,12,12]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],77],[77],[[]],[77,11],[[]],[[77,11],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],78],[78],[[]],[[]],[[78,12,12,12],12],[[],7],[[],7],[[],8],0,[[]],[[]],[[],79],[79],[[]],[[]],[79,11],[[79,11]],[[79,11,11,12],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],80],[80],[[]],[[]],[80,71],[[80,71],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],81],[81],[[]],[[]],[81,73],[[81,73],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],82],[82],[[]],[[]],[[82,12,12],12],[[],7],[[],7],[[],8],0,[[]],[[]],[[],83],[83],[[]],[[]],[[83,11,11],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],84],[84],[[]],[[]],[[84,12],12],[[],7],[[],7],[[],8],0,[[]],[[]],[[],85],[85],[[]],[[]],[[85,11],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],86],[86],[[]],[[]],[[86,12,12],12],[[],7],[[],7],[[],8],0,[[]],[[]],[[],87],[87],[[]],[[]],[[87,11,11],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],88],[88],[[]],[[]],[[88,11],12],[[],7],[[],7],[[],8],0,[[]],[[]],[[],89],[89],[[]],[[]],[[89,90],12],[[],7],[[],7],[[],8],0,0,0,[12,30],[[12,12]],[[12,12]],[[12,12]],[[12,12]],[[]],[[]],[12,12],[[]],[[],12],[[12,91],30],[[12,12],30],[[12,31],32],[[12,31],32],[30,12],[33,12],[23,12],[[]],[92,12],[91,12],[34,12],[[]],[91,12],[12],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,[[93,93]],[[]],[[]],[93,93],[[]],[[],93],[[93,93],30],[[93,31],32],[[93,31],32],[33,93],[94,93],[[]],[34,93],[10,93],[[93,[95,[16]]],33],[[]],[33,93],[93],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,[[24,24]],[[]],[[]],[24,24],[[]],[[],24],[[24,24],30],[[24,31],32],[[24,31],32],[33,24],[[]],[34,24],[10,24],[[24,[95,[16]]],33],[[]],[33,24],[24],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,[[94,94]],[[]],[[]],[94,94],[[]],[[],94],[[94,94],30],[[94,31],32],[[94,31],32],[33,94],[34,94],[10,94],[[]],[[94,[95,[16]]],33],[[]],[33,94],[94],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,[[10,10]],[[]],[[]],[10,10],[[]],[[],10],[[10,10],30],[[10,31],32],[[10,31],32],[33,10],[34,10],[11,10],[[]],[[10,[95,[16]]],33],[[]],[33,10],[10],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,[[11,33]],[[11,11]],[[11,33]],[[11,11]],[[11,11]],[[]],[[]],[11,11],[[]],[[],11],[[11,33],30],[[11,11],30],[[11,31],32],[[11,31],32],[33,11],[23,11],[[]],[30,11],[12,11],[10,11],[34,11],[5,11],[[11,[95,[16]]],33],[11,33],[11,33],[[]],[11],[33,11],[11],[[11,11],[[44,[96]]]],[[11,16,12]],[[11,11]],[[11,34]],[[11,23]],[[11,33]],[[11,33]],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,[[71,71]],[[]],[[]],[71,71],[[]],[[],71],[[71,71],30],[[71,31],32],[[71,31],32],[73,71],[91,71],[[]],[33,71],[23,71],[34,71],[[71,16],91],[[]],[91,71],[71],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,[[73,73]],[[]],[[]],[73,73],[[]],[[],73],[[73,73],30],[[73,31],32],[[73,31],32],[34,73],[[]],[91,73],[92,73],[23,73],[33,73],[97,73],[[73,16],91],[[]],[91,73],[73],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,[97,92],[97,16],[[97,97]],[[]],[[]],[97,97],[[]],[[],97],[[97,97],30],[[97,31],32],[[97,31],32],[92,97],[98,97],[34,97],[[]],[[97,[95,[16]]],91],[[]],[91,97],[97],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,[[90,90]],[[]],[[]],[90,90],[[]],[[],90],[[90,90],30],[[90,31],32],[[90,31],32],[92,90],[33,90],[23,90],[[]],[34,90],[[90,16],91],[[]],[91,90],[90],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,[[98,98]],[[]],[[]],[98,98],[[]],[[],98],[[98,98],30],[[98,31],32],[[98,31],32],[33,98],[34,98],[93,98],[[]],[[98,[95,[16]]],33],[[]],[33,98],[98],[[]],[[],36],[[],7],[[],7],[[],8],0,[[]],[[]],[[]],0,[[]],[[]],[[],99],[99],[[]],[[]],[[99,12,12],12],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],100],[100],[[]],[100,12],[[]],[[100,12,12],12],[100],[100],[[],7],[[],7],[[],8],0,[[]],[[]],[[],101],[101],[[]],[[]],[101,11],[[101,11,12,12,12],11],[101],[101],[[],7],[[],7],[[],8],0,[[]],[[]],[[],102],[102],[[]],[102,12],[[]],[[102,12],12],[102],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,[[]],[[]],[[],103],[103],[[]],0,0,[[]],0,[103,11],0,0,[[103,11,12,12,12],11],[103],[103],[[],7],[[],7],[[],8],0,[[]],[[]],0,[[],104],[104],[[]],[[104,16]],[[104,16]],[[]],[104,11],[[104,[17,[94]]]],[[104,[17,[11]]]],[[104,[17,[12]]]],[[104,11,12,[17,[94]]],11],[104],[[],7],[[],7],[[],8],0,[[]],[[]],0,[[],105],[105],[[]],[[105,16]],[[105,16]],[[]],[105,11],[[105,[17,[93]]]],[[105,[17,[11]]]],[[105,[17,[12]]]],[[105,11,12,[17,[93]]],11],[105],[[],7],[[],7],[[],8],0,[[]],[[]],0,[[],106],[106],[[]],[[106,16]],[[106,16]],[[]],[106,11],[[106,[17,[98]]]],[[106,[17,[11]]]],[[106,[17,[12]]]],[[106,11,12,[17,[98]]],11],[106],[[],7],[[],7],[[],8],0,[[]],[[]],0,[[],107],[107],[[]],[[107,16]],[[107,16]],[[]],[107,11],[[107,[17,[97]]]],[[107,[17,[11]]]],[[107,[17,[12]]]],[[107,11,12,[17,[97]]],11],[107],[[],7],[[],7],[[],8],0,[[]],[[]],0,[[],108],[108],[[]],[[108,16]],[[108,16]],[[]],[108,11],[[108,[17,[73]]]],[[108,[17,[11]]]],[[108,[17,[12]]]],[[108,11,12,[17,[73]]],11],[108],[[],7],[[],7],[[],8],0,[[]],[[]],[[],109],[109],[[109,31],32],[[]],[34,109],[[]],[109,11],[109],[[109,11,12],11],[[],36],[109,11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],110],[110],[[]],[[]],[[110,11,12,94],11],[110],[110],[[],7],[[],7],[[],8],0,[[]],[[]],[[],111],[111],[[]],[[]],[[111,11,12,93],11],[111],[111],[[],7],[[],7],[[],8],0,[[]],[[]],[[],112],[112],[[]],[[]],[[112,11,12,98],11],[112],[112],[[],7],[[],7],[[],8],0,[[]],[[]],[[],113],[113],[[]],[[]],[[113,11,12,97],11],[113],[113],[[],7],[[],7],[[],8],0,[[]],[[]],[[],114],[114],[[]],[[]],[[114,11,12,73],11],[114],[114],[[],7],[[],7],[[],8],0,[[]],[[]],[[],115],[115],[[115,31],32],[34,115],[[]],[115,11],[[]],[[115,11,12],11],[115],[[],36],[115],[[],7],[[],7],[[],8],0,[[116,16]],[[]],[[]],[[],116],[[116,31],32],[[]],[34,116],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,[[]],[[]],0,[[]],[[]],0,[[[17,[36]],[17,[36]]],117],[[],7],[[],7],[[],8],0,[[]],[[]],[[],118],[[]],[[118,49],33],[[]],[[118,[6,[46]]]],[118,11],[[118,49,11]],[[118,11]],[[118,49,11]],0,[[118,49,11]],[118],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[46,46],[[]],[[46,46],30],[[46,31],32],[[]],[26,[[7,[46]]]],[[]],[26,[[6,[46]]]],[[]],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[119,120],[[],119],[[],120],[[],119],[[]],[[]],[120,[[6,[36]]]],[[119,117],119],[[119,[6,[117]]],119],[[]],[[]],0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[49,49],[[]],[[49,49],30],[[49,31],32],[[]],[26,[[7,[49]]]],[49,16],[[]],[[]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],121],[[]],[[],[[6,[5]]]],[[],[[6,[5]]]],[[],[[6,[5]]]],[[],[[6,[5]]]],[[]],[[[6,[46]]],[[6,[5]]]],[[121,[6,[46]]],[[6,[5]]]],[[],7],[[],7],[[],8]],"p":[[3,"Computer"],[3,"Keyboard"],[3,"Memory"],[3,"Screen"],[4,"AsmInstruction"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"Cpu"],[3,"Signal15"],[3,"Signal16"],[4,"Signal"],[3,"Cpu"],[3,"Memory"],[3,"Rom32k"],[15,"usize"],[8,"Into"],[3,"Path"],[8,"AsRef"],[8,"Error"],[3,"Box"],[15,"u32"],[15,"u16"],[3,"Signal13"],[3,"Assembler"],[15,"str"],[4,"Dest"],[4,"Comp"],[4,"Jump"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"i16"],[15,"i32"],[3,"CalError"],[3,"String"],[3,"Range"],[4,"Operator"],[4,"UnaryOperator"],[4,"Literal"],[4,"Term"],[3,"Expression"],[4,"Symbol"],[4,"Option"],[3,"Generator"],[4,"VmInstruction"],[3,"SymbolEntry"],[3,"Variable"],[4,"Segment"],[3,"Function"],[3,"IfStatement"],[3,"Module"],[4,"Statement"],[3,"WhileStatement"],[3,"Tokens"],[3,"Parser"],[4,"Type"],[3,"Field"],[3,"StructDec"],[4,"Keyword"],[3,"SymbolTable"],[4,"TokenKind"],[3,"Token"],[15,"char"],[3,"Add16"],[3,"Alu"],[3,"And"],[3,"And16"],[3,"Demux"],[3,"Demux4Way"],[4,"Signal2"],[3,"Demux8Way"],[3,"Signal3"],[3,"Alu"],[3,"FullAdder"],[3,"HalfAdder"],[3,"Inc16"],[3,"Mux"],[3,"Mux16"],[3,"Mux4Way16"],[3,"Mux8Way16"],[3,"Nand"],[3,"Nand16"],[3,"Not"],[3,"Not16"],[3,"Or"],[3,"Or16"],[3,"Or16Way"],[3,"Or8Way"],[3,"Signal8"],[15,"i8"],[15,"u8"],[3,"Signal12"],[3,"Signal14"],[3,"Range"],[4,"Ordering"],[3,"Signal6"],[3,"Signal9"],[3,"Xor"],[3,"Bit"],[3,"Counter"],[3,"Dff"],[3,"Counter"],[3,"Ram16k"],[3,"Ram4k"],[3,"Ram512"],[3,"Ram64"],[3,"Ram8"],[3,"Register16"],[3,"Ram16k"],[3,"Ram4k"],[3,"Ram512"],[3,"Ram64"],[3,"Ram8"],[3,"Register16"],[3,"Time"],[3,"VmCode"],[3,"VmEmulator"],[3,"VmPreprocessedCodeBuilder"],[3,"VmPreprocessedCode"],[3,"VmTranslator"],[13,"A"],[13,"C"],[13,"Label"],[13,"Symbol"],[8,"Compile"],[13,"I16"],[13,"Bool"],[13,"Char"],[13,"Array"],[13,"Literal"],[13,"Call"],[13,"Variable"],[13,"Index"],[13,"UnaryOp"],[8,"Generate"],[13,"Expression"],[13,"Return"],[13,"Let"],[13,"If"],[13,"While"],[13,"Array"],[13,"Ref"],[8,"Tokenize"],[13,"Keyword"],[13,"Symbol"],[13,"Identifier"],[13,"Integer"],[13,"Char"],[8,"Unit"],[13,"Push"],[13,"Pop"],[13,"Label"],[13,"Goto"],[13,"IfGoto"],[13,"Function"],[13,"Call"],[13,"Return"]]},\
"calc":{"doc":"","t":[5,5],"n":["main","to_bytes"],"q":["calc",""],"d":["",""],"i":[0,0],"f":[[[],[[2,[1]]]],[3]],"p":[[3,"CalError"],[4,"Result"],[15,"u16"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

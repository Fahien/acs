var searchIndex = JSON.parse('{\
"acs":{"doc":"Acs is an experimental project for learning computer â€¦","tn":["arch","asm","logic","mem","cpu","keyboard","memory","rom32k","screen","Cpu","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Keyboard","borrow","borrow_mut","default","eval","from","into","out","try_from","try_into","type_id","Memory","borrow","borrow_mut","default","eval","from","into","sim","tick","try_from","try_into","type_id","Rom32k","borrow","borrow_mut","default","eval","from","into","out","set_address","set_instructions","sim","try_from","try_into","type_id","Screen","as_bytes","borrow","borrow_mut","default","dump","eval","from","into","out","set_address","sim","tick","try_from","try_into","type_id","instruction","A","A","A","AD","AM","AMD","AMinusD","AMinusOne","APlusOne","AsmInstruction","AsmInstructionBuilder","C","Comp","D","D","DAndA","DAndM","DM","DMinusA","DMinusM","DMinusOne","DOrA","DOrM","DPlusA","DPlusM","DPlusOne","Dest","JEQ","JGE","JGT","JLE","JLT","JMP","JNE","Jump","Kind","M","M","MMinusD","MMinusOne","MPlusOne","MinusA","MinusD","MinusM","MinusOne","NOP","NotA","NotD","NotM","Null","One","Zero","a","assign_a_to_d","bitor","bitor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comp","default","default","dest","eq","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","from_str","into","into","into","into","into","into","jump","kind","ne","new","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","add16","alu","and","and16","demux","demux4way","demux8way","fulladder","halfadder","inc16","mux","mux16","mux4way16","mux8way16","nand","nand16","not","not16","or","or16","or16way","or8way","signal","signal12","signal13","signal14","signal15","signal16","signal2","signal3","signal6","signal8","signal9","unit","xor","Add16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Alu","borrow","borrow_mut","default","eval","from","into","out","set_x","set_y","sim","try_from","try_into","type_id","And","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","And16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux4Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","FullAdder","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HalfAdder","borrow","borrow_mut","default","eval","from","into","new","sim","try_from","try_into","type_id","Inc16","borrow","borrow_mut","default","eval","from","get_out","into","sim","try_from","try_into","type_id","Mux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux16","borrow","borrow_mut","default","eval","from","into","out","set_a","sim","try_from","try_into","type_id","Mux4Way16","borrow","borrow_mut","default","eval","from","into","sel","sim","try_from","try_into","type_id","Mux8Way16","borrow","borrow_mut","default","eval","from","into","sel","sim","try_from","try_into","type_id","Nand","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Nand16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HI","LO","Signal","as_bool","bitand","bitand_assign","bitor_assign","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal12","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal13","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal14","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal15","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal16","TRUE","add","add","bitand","bitor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","from","get","into","neg","new","not","set","sub","sub","to_owned","to_string","try_from","try_into","type_id","values","FALSE","HIHI","HILO","LOHI","LOLO","Signal2","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal3","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal6","TRUE","as_u8","as_usize","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal8","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal9","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","Unit","eval","tick","tock","Xor","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","bit","counter","dff","fast","ram16k","ram4k","ram512","ram64","ram8","register16","time","Bit","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","tock","try_from","try_into","type_id","Counter","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","tock","try_from","try_into","type_id","Dff","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","try_from","try_into","type_id","ram","ram16k","ram4k","ram512","ram64","ram8","register16","Ram16k","borrow","borrow_mut","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram4k","borrow","borrow_mut","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram512","borrow","borrow_mut","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram64","borrow","borrow_mut","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram8","borrow","borrow_mut","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Register16","borrow","borrow_mut","default","eval","fmt","from","from","into","out","run","sim","to_string","tock","try_from","try_into","type_id","Ram16k","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram4k","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram512","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram64","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram8","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Register16","borrow","borrow_mut","default","eval","fmt","from","from","get_out","into","sim","tick","to_string","tock","try_from","try_into","type_id","Time","add_assign","borrow","borrow_mut","default","fmt","from","from","into","to_string","try_from","try_into","type_id"],"q":["acs","","","","acs::arch","","","","","acs::arch::cpu","","","","","","","","","","","","","acs::arch::keyboard","","","","","","","","","","","acs::arch::memory","","","","","","","","","","","","acs::arch::rom32k","","","","","","","","","","","","","","acs::arch::screen","","","","","","","","","","","","","","","","acs::asm","acs::asm::instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::add16","","","","","","","","","","","acs::logic::alu","","","","","","","","","","","","","","acs::logic::and","","","","","","","","","","","acs::logic::and16","","","","","","","","","","","acs::logic::demux","","","","","","","","","","","acs::logic::demux4way","","","","","","","","","","","acs::logic::demux8way","","","","","","","","","","","acs::logic::fulladder","","","","","","","","","","","acs::logic::halfadder","","","","","","","","","","","","acs::logic::inc16","","","","","","","","","","","","acs::logic::mux","","","","","","","","","","","acs::logic::mux16","","","","","","","","","","","","","acs::logic::mux4way16","","","","","","","","","","","","acs::logic::mux8way16","","","","","","","","","","","","acs::logic::nand","","","","","","","","","","","acs::logic::nand16","","","","","","","","","","","acs::logic::not","","","","","","","","","","","acs::logic::not16","","","","","","","","","","","acs::logic::or","","","","","","","","","","","acs::logic::or16","","","","","","","","","","","acs::logic::or16way","","","","","","","","","","","acs::logic::or8way","","","","","","","","","","","acs::logic::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal12","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal13","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal14","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal15","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal16","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal6","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal8","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal9","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::unit","","","","acs::logic::xor","","","","","","","","","","","acs::mem","","","","","","","","","","","acs::mem::bit","","","","","","","","","","","","","","acs::mem::counter","","","","","","","","","","","","","","acs::mem::dff","","","","","","","","","","","","","acs::mem::fast","","","","","","","acs::mem::fast::ram16k","","","","","","","","","","","","","","","","acs::mem::fast::ram4k","","","","","","","","","","","","","","","","acs::mem::fast::ram512","","","","","","","","","","","","","","","","acs::mem::fast::ram64","","","","","","","","","","","","","","","","acs::mem::fast::ram8","","","","","","","","","","","","","","","","acs::mem::fast::register16","","","","","","","","","","","","","","","","","acs::mem::ram16k","","","","","","","","","","","","","acs::mem::ram4k","","","","","","","","","","","","","acs::mem::ram512","","","","","","","","","","","","","acs::mem::ram64","","","","","","","","","","","","","acs::mem::ram8","","","","","","","","","","","","","acs::mem::register16","","","","","","","","","","","","","","","","","acs::mem::time","","","","","","","","","","","",""],"d":["","","","","","","","","","Central Processing Unit able to execute a given â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","Built-in register chip acting as a keyboard","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the 16-bit character code of the currently pressed â€¦","","","","Package of three 16-bit chip parts: <code>Ram16k</code>, <code>Screen</code>, and â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","Instruction memory, preloaded with the required program.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Carries out the simulation taking as input an address and â€¦","","","","512x256 black-and-white screen which behaves like a <code>Ram8k</code>.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","","A-instructions start with <code>0</code>","A register","","A and D register","A register and RAM[A]","A and D register and RAM[A]","","","","","","C-instructions start with <code>111</code>","Comp part of a C-instruction. Format is this: â€¦","D register","","","","D register and RAM[A]","","","","","","","","","Where to store <code>Comp</code>. Format is this: <code>**** **** **dd d***</code>","Jump if <code>comp == 0</code>","Jump if <code>comp &gt;= 0</code>","Jump if <code>comp &gt; 0</code>","Jump if <code>comp &lt;= 0</code>","Jump if <code>comp &lt; 0</code>","Unconditional jump","Jump if <code>comp != 0</code>","Jump part of a C-instruction. Format is: â€¦","","RAM[A]","","","","","","","","","No jump","","","","Value is not stored","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The Add16 chip is able to add two 16-bit numbers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a + b</code> (overflowing â€¦","","","","Arithmetic Logic Unit","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Carries out the ALU simulation.","","","","The AND gate is built using a NOT and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a AND b</code>","","","","Similar to the AND gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The Demultiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","4-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","8-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","By means of two Half-adders, the Full-adder is able to add â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation but computing <code>a + b + c</code> and â€¦","","","","The Half-adder chip is able to add together 2 binary â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation but computing <code>a + b</code> and returns â€¦","","","","The Inc16 chip is able to add 1 to a given number.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>inp + 1</code> â€¦","","","","The Multiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>sel ? b : a</code>","","","","Similar to the Mux gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Carries out the simulation and returns <code>sel ? b : a</code> over â€¦","","","","4-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation and returns","","","","8-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation and returns","","","","The NAND gate is the only built-in logic component","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a NAND b</code>","","","","Similar to the Nand gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The NOT gate is built using a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>NOT inp</code>","","","","Similar to the Not gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The OR gate is built using two NOTs and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a OR b</code>","","","","Similar to the Or gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","16-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","8-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","12 signals into one","All signals <code>HI</code>","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","13 signals into one","All signals <code>HI</code>","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","14 signals into one","All signals <code>HI</code>","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","15 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","16 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","All signals <code>LO</code>","","","","","2 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","3 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","6 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","8 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","9 signals into one","All signals <code>HI</code>","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","Common operations for a logic unit.","Evaluates the logic expression as we do with arithmetic â€¦","Carries out the tick-phase of a clock cycle: LOW","Carries out the tock-phase of a clock cycle: HIGH","The XOR gate is built using a NAND, an OR, and an AND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a XOR b</code>","","","","","","","","","","","","","","","Single-bit register, storing <code>0</code> or <code>1</code> over time.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","Memory device which can increment its value in every time â€¦","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","Data Flip-Flop","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>inp</code> at <code>t-1</code>","","","","","","","","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast 16-bit register which, as opposed to the other â€¦","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 16k 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 4k 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 512 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 64 16-bit register (8 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 8 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","16-bit register, behaving exactly like a 1-bit register, â€¦","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","","Helper class for keeping track of time, advancing every â€¦","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,22,20,23,20,20,20,23,23,23,0,0,22,0,20,23,23,23,20,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,0,0,20,23,23,23,23,23,23,23,23,24,23,23,23,20,23,23,11,11,11,20,22,20,23,24,11,21,22,20,23,24,11,21,21,11,22,20,23,24,11,21,22,20,23,24,11,21,21,11,21,21,11,11,11,22,20,20,23,24,11,11,21,20,23,24,22,20,23,24,11,21,21,21,11,21,22,20,23,24,11,21,22,20,23,24,11,21,22,20,23,24,11,21,22,20,23,24,11,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,29,29,29,29,29,29,29,29,29,0,30,30,30,30,30,30,30,30,30,30,30,30,30,0,31,31,31,31,31,31,31,31,31,31,0,32,32,32,32,32,32,32,32,32,32,0,33,33,33,33,33,33,33,33,33,33,0,34,34,34,34,34,34,34,34,34,34,0,36,36,36,36,36,36,36,36,36,36,0,38,38,38,38,38,38,38,38,38,38,0,39,39,39,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,41,41,41,41,41,0,42,42,42,42,42,42,42,42,42,42,42,42,0,43,43,43,43,43,43,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,44,0,45,45,45,45,45,45,45,45,45,45,0,46,46,46,46,46,46,46,46,46,46,0,47,47,47,47,47,47,47,47,47,47,0,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,0,50,50,50,50,50,50,50,50,50,50,0,51,51,51,51,51,51,51,51,51,51,0,52,52,52,52,52,52,52,52,52,52,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,59,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,60,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,35,35,35,35,35,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,37,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,63,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,53,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,64,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,82,82,82,0,65,65,65,65,65,65,65,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,66,66,66,66,66,66,66,66,66,66,66,66,66,0,67,67,67,67,67,67,67,67,67,67,67,67,67,0,68,68,68,68,68,68,68,68,68,68,68,68,0,0,0,0,0,0,0,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,75,75,75,75,75,75,75,75,75,75,75,75,0,76,76,76,76,76,76,76,76,76,76,76,76,0,77,77,77,77,77,77,77,77,77,77,77,77,0,78,78,78,78,78,78,78,78,78,78,78,78,0,79,79,79,79,79,79,79,79,79,79,79,79,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,81,81,81,81,81,81,81,81,81,81,81,81],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[1],[[]],[[]],[[1,2,2,3]],[1],[1],[[],4],[[],4],[[],5],0,[[]],[[]],[[],6],[6],[[]],[[]],[6,2],[[],4],[[],4],[[],5],0,[[]],[[]],[[],7],[7],[[]],[[]],[[7,2,3,8],2],[7],[[],4],[[],4],[[],5],0,[[]],[[]],[[],9],[9],[[]],[[]],[9,2],[[9,[10,[8]]]],[[9,[12,[11]]]],[[9,8],2],[[],4],[[],4],[[],5],0,[13],[[]],[[]],[[],13],[[13,[15,[14]]],[[4,[[17,[16]]]]]],[13],[[]],[[]],[13,2],[[13,[10,[18]]]],[[13,2,3,18],2],[13],[[],4],[[],4],[[],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[19,11],[[],11],[[11,20]],[[20,20]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,11],[[],21],[22,22],[20,20],[23,23],[24,24],[11,11],[21,21],[[]],[[]],[[]],[[]],[[]],[[]],[[21,23],21],[[],11],[[],21],[[21,20],21],[[11,11],25],[[11,26],27],[[11,26],27],[[]],[[]],[19,20],[[]],[[]],[[]],[19,11],[[]],[28,[[4,[20]]]],[28,[[4,[23]]]],[28,[[4,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[21,24],21],[[21,22],21],[[11,11],25],[[],21],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[21,19],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],29],[29],[[]],[[]],[[29,2,2],2],[[],4],[[],4],[[],5],0,[[]],[[]],[[],30],[30],[[]],[[]],[30,2],[[30,2]],[[30,2]],[[30,2,2,3,3,3,3,3,3]],[[],4],[[],4],[[],5],0,[[]],[[]],[[],31],[31],[[]],[[]],[[31,3,3],3],[[],4],[[],4],[[],5],0,[[]],[[]],[[],32],[32],[[]],[[]],[[32,2,2],2],[[],4],[[],4],[[],5],0,[[]],[[]],[[],33],[33],[[]],[[]],[[33,3,3]],[[],4],[[],4],[[],5],0,[[]],[[]],[[],34],[34],[[]],[[]],[[34,3,35]],[[],4],[[],4],[[],5],0,[[]],[[]],[[],36],[36],[[]],[[]],[[36,3,37]],[[],4],[[],4],[[],5],0,[[]],[[]],[[],38],[38],[[]],[[]],[[38,3,3,3]],[[],4],[[],4],[[],5],0,[[]],[[]],[[],39],[39],[[]],[[]],[[3,3],39],[[39,3,3]],[[],4],[[],4],[[],5],0,[[]],[[]],[[],40],[40],[[]],[40,2],[[]],[[40,2],2],[[],4],[[],4],[[],5],0,[[]],[[]],[[],41],[41],[[]],[[]],[[41,3,3,3],3],[[],4],[[],4],[[],5],0,[[]],[[]],[[],42],[42],[[]],[[]],[42,2],[[42,2]],[[42,2,2,3],2],[[],4],[[],4],[[],5],0,[[]],[[]],[[],43],[43],[[]],[[]],[43,35],[[43,35],2],[[],4],[[],4],[[],5],0,[[]],[[]],[[],44],[44],[[]],[[]],[44,37],[[44,37],2],[[],4],[[],4],[[],5],0,[[]],[[]],[[],45],[45],[[]],[[]],[[45,3,3],3],[[],4],[[],4],[[],5],0,[[]],[[]],[[],46],[46],[[]],[[]],[[46,2,2],2],[[],4],[[],4],[[],5],0,[[]],[[]],[[],47],[47],[[]],[[]],[[47,3],3],[[],4],[[],4],[[],5],0,[[]],[[]],[[],48],[48],[[]],[[]],[[48,2],2],[[],4],[[],4],[[],5],0,[[]],[[]],[[],49],[49],[[]],[[]],[[49,3,3],3],[[],4],[[],4],[[],5],0,[[]],[[]],[[],50],[50],[[]],[[]],[[50,2,2],2],[[],4],[[],4],[[],5],0,[[]],[[]],[[],51],[51],[[]],[[]],[[51,2],3],[[],4],[[],4],[[],5],0,[[]],[[]],[[],52],[52],[[]],[[]],[[52,53],3],[[],4],[[],4],[[],5],0,0,0,[3,25],[[3,3]],[[3,3]],[[3,3]],[[]],[[]],[3,3],[[]],[[],3],[[3,3],25],[[3,54],25],[[3,26],27],[[3,26],27],[55,3],[56,3],[57,3],[19,3],[25,3],[[]],[54,3],[[]],[54,3],[3],[[]],[[],58],[[],4],[[],4],[[],5],0,0,0,[[59,59]],[[]],[[]],[59,59],[[]],[[],59],[[59,59],25],[[59,26],27],[[59,26],27],[56,59],[[]],[8,59],[60,59],[57,59],[[59,[62,[61]]],57],[[]],[57,59],[59],[[]],[[],58],[[],4],[[],4],[[],5],0,0,0,[[18,18]],[[]],[[]],[18,18],[[]],[[],18],[[18,18],25],[[18,26],27],[[18,26],27],[57,18],[[]],[8,18],[56,18],[[18,[62,[61]]],57],[[]],[57,18],[18],[[]],[[],58],[[],4],[[],4],[[],5],0,0,0,0,[[60,60]],[[]],[[]],[60,60],[[]],[[],60],[[60,60],25],[[60,26],27],[[60,26],27],[56,60],[57,60],[[]],[8,60],[[60,[62,[61]]],57],[[]],[[60,60],25],[57,60],[60],[[]],[[],58],[[],4],[[],4],[[],5],0,0,0,0,[[8,8]],[[]],[[]],[8,8],[[]],[[],8],[[8,8],25],[[8,26],27],[[8,26],27],[57,8],[56,8],[2,8],[[]],[[8,[62,[61]]],57],[[]],[[8,8],25],[57,8],[8],[[]],[[],58],[[],4],[[],4],[[],5],0,0,0,0,[[2,57]],[[2,2]],[[2,2]],[[2,2]],[[]],[[]],[2,2],[[]],[[],2],[[2,2],25],[[2,26],27],[[2,26],27],[11,2],[56,2],[19,2],[57,2],[3,2],[8,2],[[]],[[2,[62,[61]]],57],[[]],[2],[57,2],[2],[[2,61,3]],[[2,57]],[[2,2]],[[]],[[],58],[[],4],[[],4],[[],5],0,0,0,0,0,0,0,0,[[35,35]],[[]],[[]],[35,35],[[]],[[],35],[[35,35],25],[[35,26],27],[[35,26],27],[[]],[37,35],[56,35],[54,35],[19,35],[57,35],[[35,61],54],[[]],[54,35],[35],[[]],[[],58],[[],4],[[],4],[[],5],0,0,0,[[37,37]],[[]],[[]],[37,37],[[]],[[],37],[[37,37],25],[[37,26],27],[[37,26],27],[[]],[56,37],[63,37],[19,37],[54,37],[55,37],[57,37],[[37,61],54],[[]],[[37,37],25],[54,37],[37],[[]],[[],58],[[],4],[[],4],[[],5],0,0,0,[63,55],[63,61],[[63,63]],[[]],[[]],[63,63],[[]],[[],63],[[63,63],25],[[63,26],27],[[63,26],27],[64,63],[56,63],[55,63],[[]],[[63,[62,[61]]],54],[[]],[54,63],[63],[[]],[[],58],[[],4],[[],4],[[],5],0,0,0,0,[[53,53]],[[]],[[]],[53,53],[[]],[[],53],[[53,53],25],[[53,26],27],[[53,26],27],[[]],[56,53],[19,53],[57,53],[55,53],[[53,61],54],[[]],[[53,53],25],[54,53],[53],[[]],[[],58],[[],4],[[],4],[[],5],0,0,0,0,[[64,64]],[[]],[[]],[64,64],[[]],[[],64],[[64,64],25],[[64,26],27],[[64,26],27],[57,64],[[]],[56,64],[59,64],[[64,[62,[61]]],57],[[]],[57,64],[64],[[]],[[],58],[[],4],[[],4],[[],5],0,[[]],[[]],[[]],0,[[]],[[]],[[],65],[65],[[]],[[]],[[65,3,3],3],[[],4],[[],4],[[],5],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],66],[66],[[]],[66,3],[[]],[[66,3,3],3],[66],[66],[[],4],[[],4],[[],5],0,[[]],[[]],[[],67],[67],[[]],[67,2],[[]],[[67,2,3,3,3],2],[67],[67],[[],4],[[],4],[[],5],0,[[]],[[]],[[],68],[68],[[]],[68,3],[[]],[[68,3],3],[68],[[],4],[[],4],[[],5],0,0,0,0,0,0,0,0,[[]],[[]],[[],69],[69],[[]],[[]],[69,2],[[69,[10,[60]]]],[[69,[10,[2]]]],[[69,[10,[3]]]],[[69,2,3,[10,[60]]],2],[69],[[],4],[[],4],[[],5],0,[[]],[[]],[[],70],[70],[[]],[[]],[70,2],[[70,[10,[59]]]],[[70,[10,[2]]]],[[70,[10,[3]]]],[[70,2,3,[10,[59]]],2],[70],[[],4],[[],4],[[],5],0,[[]],[[]],[[],71],[71],[[]],[[]],[71,2],[[71,[10,[64]]]],[[71,[10,[2]]]],[[71,[10,[3]]]],[[71,2,3,[10,[64]]],2],[71],[[],4],[[],4],[[],5],0,[[]],[[]],[[],72],[72],[[]],[[]],[72,2],[[72,[10,[63]]]],[[72,[10,[2]]]],[[72,[10,[3]]]],[[72,2,3,[10,[63]]],2],[72],[[],4],[[],4],[[],5],0,[[]],[[]],[[],73],[73],[[]],[[]],[73,2],[[73,[10,[37]]]],[[73,[10,[2]]]],[[73,[10,[3]]]],[[73,2,3,[10,[37]]],2],[73],[[],4],[[],4],[[],5],0,[[]],[[]],[[],74],[74],[[74,26],27],[[]],[56,74],[[]],[74,2],[74],[[74,2,3],2],[[],58],[74,2],[[],4],[[],4],[[],5],0,[[]],[[]],[[],75],[75],[[]],[[]],[[75,2,3,60],2],[75],[75],[[],4],[[],4],[[],5],0,[[]],[[]],[[],76],[76],[[]],[[]],[[76,2,3,59],2],[76],[76],[[],4],[[],4],[[],5],0,[[]],[[]],[[],77],[77],[[]],[[]],[[77,2,3,64],2],[77],[77],[[],4],[[],4],[[],5],0,[[]],[[]],[[],78],[78],[[]],[[]],[[78,2,3,63],2],[78],[78],[[],4],[[],4],[[],5],0,[[]],[[]],[[],79],[79],[[]],[[]],[[79,2,3,37],2],[79],[79],[[],4],[[],4],[[],5],0,[[]],[[]],[[],80],[80],[[80,26],27],[56,80],[[]],[80,2],[[]],[[80,2,3],2],[80],[[],58],[80],[[],4],[[],4],[[],5],0,[[81,61]],[[]],[[]],[[],81],[[81,26],27],[56,81],[[]],[[]],[[],58],[[],4],[[],4],[[],5]],"p":[[3,"Cpu"],[3,"Signal16"],[4,"Signal"],[4,"Result"],[3,"TypeId"],[3,"Keyboard"],[3,"Memory"],[3,"Signal15"],[3,"Rom32k"],[8,"Into"],[3,"AsmInstruction"],[3,"Vec"],[3,"Screen"],[3,"Path"],[8,"AsRef"],[8,"Error"],[3,"Box"],[3,"Signal13"],[15,"u16"],[4,"Dest"],[3,"AsmInstructionBuilder"],[4,"Kind"],[4,"Comp"],[4,"Jump"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Add16"],[3,"Alu"],[3,"And"],[3,"And16"],[3,"Demux"],[3,"Demux4Way"],[4,"Signal2"],[3,"Demux8Way"],[3,"Signal3"],[3,"FullAdder"],[3,"HalfAdder"],[3,"Inc16"],[3,"Mux"],[3,"Mux16"],[3,"Mux4Way16"],[3,"Mux8Way16"],[3,"Nand"],[3,"Nand16"],[3,"Not"],[3,"Not16"],[3,"Or"],[3,"Or16"],[3,"Or16Way"],[3,"Or8Way"],[3,"Signal8"],[15,"i8"],[15,"u8"],[15,"i32"],[15,"i16"],[3,"String"],[3,"Signal12"],[3,"Signal14"],[15,"usize"],[3,"Range"],[3,"Signal6"],[3,"Signal9"],[3,"Xor"],[3,"Bit"],[3,"Counter"],[3,"Dff"],[3,"Ram16k"],[3,"Ram4k"],[3,"Ram512"],[3,"Ram64"],[3,"Ram8"],[3,"Register16"],[3,"Ram16k"],[3,"Ram4k"],[3,"Ram512"],[3,"Ram64"],[3,"Ram8"],[3,"Register16"],[3,"Time"],[8,"Unit"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

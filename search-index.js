var searchIndex = JSON.parse('{\
"acs":{"doc":"Acs is an experimental project for learning computer …","tn":["logic","mem","add16","alu","and","and16","demux","demux4way","demux8way","fulladder","halfadder","inc16","mux","mux16","mux4way16","mux8way16","nand","nand16","not","not16","or","or16","or16way","or8way","signal","signal16","signal2","signal3","signal6","signal8","unit","xor","Add16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Alu","borrow","borrow_mut","default","eval","from","into","out","sim","try_from","try_into","type_id","And","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","And16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux4Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","FullAdder","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HalfAdder","borrow","borrow_mut","default","eval","from","into","new","sim","try_from","try_into","type_id","Inc16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux16","borrow","borrow_mut","default","eval","from","into","out","set_a","sim","try_from","try_into","type_id","Mux4Way16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux8Way16","borrow","borrow_mut","default","eval","from","into","sel","sim","try_from","try_into","type_id","Nand","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Nand16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HI","LO","Signal","as_bool","bitand","bitand_assign","bitor_assign","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal16","TRUE","add","add","bitand","bitor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","neg","new","not","set","sub","sub","to_owned","to_string","try_from","try_into","type_id","values","FALSE","HIHI","HILO","LOHI","LOLO","Signal2","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal3","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal6","TRUE","as_u8","as_usize","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal8","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","Unit","eval","tick","tock","Xor","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","bit","dff","fast","ram64","ram8","register16","time","Bit","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","tock","try_from","try_into","type_id","Dff","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","try_from","try_into","type_id","ram","ram8","register16","Ram8","borrow","borrow_mut","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Register16","borrow","borrow_mut","default","eval","fmt","from","from","into","out","run","sim","to_string","tock","try_from","try_into","type_id","Ram64","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram8","borrow","borrow_mut","default","eval","from","into","sim","tick","try_from","try_into","type_id","Register16","borrow","borrow_mut","default","eval","fmt","from","from","into","sim","tick","to_string","tock","try_from","try_into","type_id","Time","add_assign","borrow","borrow_mut","default","fmt","from","from","into","to_string","try_from","try_into","type_id"],"q":["acs","","acs::logic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::add16","","","","","","","","","","","acs::logic::alu","","","","","","","","","","","","acs::logic::and","","","","","","","","","","","acs::logic::and16","","","","","","","","","","","acs::logic::demux","","","","","","","","","","","acs::logic::demux4way","","","","","","","","","","","acs::logic::demux8way","","","","","","","","","","","acs::logic::fulladder","","","","","","","","","","","acs::logic::halfadder","","","","","","","","","","","","acs::logic::inc16","","","","","","","","","","","acs::logic::mux","","","","","","","","","","","acs::logic::mux16","","","","","","","","","","","","","acs::logic::mux4way16","","","","","","","","","","","acs::logic::mux8way16","","","","","","","","","","","","acs::logic::nand","","","","","","","","","","","acs::logic::nand16","","","","","","","","","","","acs::logic::not","","","","","","","","","","","acs::logic::not16","","","","","","","","","","","acs::logic::or","","","","","","","","","","","acs::logic::or16","","","","","","","","","","","acs::logic::or16way","","","","","","","","","","","acs::logic::or8way","","","","","","","","","","","acs::logic::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal16","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal3","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal6","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal8","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::unit","","","","acs::logic::xor","","","","","","","","","","","acs::mem","","","","","","","acs::mem::bit","","","","","","","","","","","","","","acs::mem::dff","","","","","","","","","","","","","acs::mem::fast","","","acs::mem::fast::ram8","","","","","","","","","","","","","","","","acs::mem::fast::register16","","","","","","","","","","","","","","","","","acs::mem::ram64","","","","","","","","","","","","","acs::mem::ram8","","","","","","","","","","","","acs::mem::register16","","","","","","","","","","","","","","","","acs::mem::time","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The Add16 chip is able to add two 16-bit numbers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a + b</code> (overflowing …","","","","Arithmetic Logic Unit","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the ALU simulation.","","","","The AND gate is built using a NOT and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a AND b</code>","","","","Similar to the AND gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","The Demultiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns …","","","","4-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","8-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","By means of two Half-adders, the Full-adder is able to add …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation but computing <code>a + b + c</code> and …","","","","The Half-adder chip is able to add together 2 binary …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation but computing <code>a + b</code> and returns …","","","","The Inc16 chip is able to add 1 to a given number.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>inp + 1</code> …","","","","The Multiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>sel ? b : a</code>","","","","Similar to the Mux gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Carries out the simulation and returns <code>sel ? b : a</code> over …","","","","4-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","8-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation and returns","","","","The NAND gate is the only built-in logic component","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a NAND b</code>","","","","Similar to the Nand gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","The NOT gate is built using a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>NOT inp</code>","","","","Similar to the Not gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","The OR gate is built using two NOTs and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a OR b</code>","","","","Similar to the Or gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","16-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns …","","","","8-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","16 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","All signals <code>LO</code>","","","","","2 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","3 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","6 signals into one","All signals <code>HI</code>","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","8 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Common operations for a logic unit.","Evaluates the logic expression as we do with arithmetic …","Carries out the tick-phase of a clock cycle: LOW","Carries out the tock-phase of a clock cycle: HIGH","The XOR gate is built using a NAND, an OR, and an AND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a XOR b</code>","","","","","","","","","","","Single-bit register, storing <code>0</code> or <code>1</code> over time.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","Data Flip-Flop","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>inp</code> at <code>t-1</code>","","","","","","","","Fast RAM which, as opposed to the other RAMs, it does not …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast 16-bit register which, as opposed to the other …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 64 16-bit register (8 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 8 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","16-bit register, behaving exactly like a 1-bit register, …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","","Helper class for keeping track of time, advancing every …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,5,5,5,5,5,5,5,5,5,5,5,0,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,0,12,12,12,12,12,12,12,12,12,12,0,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,24,24,24,0,25,25,25,25,25,25,25,25,25,25,0,26,26,26,26,26,26,26,26,26,26,0,27,27,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,28,28,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,29,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,52,52,52,0,42,42,42,42,42,42,42,42,42,42,0,0,0,0,0,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,48,48,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,49,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,51,51,51,51,51,51,51,51,51,51,51,51],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[1],[[]],[[]],[[1,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],5],[5],[[]],[[]],[5,2],[[5,2,2,6,6,6,6,6,6]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],7],[7],[[]],[[]],[[7,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],8],[8],[[]],[[]],[[8,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],9],[9],[[]],[[]],[[9,6,6]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],10],[10],[[]],[[]],[[10,6,11]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],12],[12],[[]],[[]],[[12,6,13]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],14],[14],[[]],[[]],[[14,6,6,6]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],15],[15],[[]],[[]],[[6,6],15],[[15,6,6]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],16],[16],[[]],[[]],[[16,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],17],[17],[[]],[[]],[[17,6,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],18],[18],[[]],[[]],[18,2],[[18,2]],[[18,2,2,6],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],19],[19],[[]],[[]],[[19,11],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],20],[20],[[]],[[]],[20,13],[[20,13],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],21],[21],[[]],[[]],[[21,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],22],[22],[[]],[[]],[[22,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],23],[23],[[]],[[]],[[23,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],24],[24],[[]],[[]],[[24,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],25],[25],[[]],[[]],[[25,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],26],[26],[[]],[[]],[[26,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],27],[27],[[]],[[]],[[27,2],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],28],[28],[[]],[[]],[[28,29],6],[[],3],[[],3],[[],4],0,0,0,[6,30],[[6,6]],[[6,6]],[[6,6]],[[]],[[]],[6,6],[[]],[[],6],[[6,6],30],[[6,31],30],[[6,32],33],[[6,32],33],[31,6],[[]],[34,6],[35,6],[30,6],[36,6],[37,6],[[]],[31,6],[6],[[]],[[],38],[[],3],[[],3],[[],4],0,0,0,[[2,36]],[[2,2]],[[2,2]],[[2,2]],[[]],[[]],[2,2],[[]],[[],2],[[2,2],30],[[2,32],33],[[2,32],33],[34,2],[37,2],[36,2],[6,2],[[]],[[2,[40,[39]]],36],[[]],[2],[36,2],[2],[[2,39,6]],[[2,2]],[[2,36]],[[]],[[],38],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,0,[[11,11]],[[]],[[]],[11,11],[[]],[[],11],[[11,11],30],[[11,32],33],[[11,32],33],[[]],[31,11],[13,11],[37,11],[34,11],[[11,39],31],[[]],[31,11],[11],[[]],[[],38],[[],3],[[],3],[[],4],0,0,0,[[13,13]],[[]],[[]],[13,13],[[]],[[],13],[[13,13],30],[[13,32],33],[[13,32],33],[[]],[35,13],[37,13],[34,13],[41,13],[31,13],[[13,39],31],[[]],[[13,13],30],[31,13],[13],[[]],[[],38],[[],3],[[],3],[[],4],0,0,0,[41,35],[41,39],[[41,41]],[[]],[[]],[41,41],[[]],[[],41],[[41,41],30],[[41,32],33],[[41,32],33],[[]],[34,41],[35,41],[[41,[40,[39]]],31],[[]],[31,41],[41],[[]],[[],38],[[],3],[[],3],[[],4],0,0,0,0,[[29,29]],[[]],[[]],[29,29],[[]],[[],29],[[29,29],30],[[29,32],33],[[29,32],33],[[]],[35,29],[36,29],[37,29],[34,29],[[29,39],31],[[]],[[29,29],30],[31,29],[29],[[]],[[],38],[[],3],[[],3],[[],4],0,0,[[]],[[]],[[]],0,[[]],[[]],[[],42],[42],[[]],[[]],[[42,6,6],6],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,0,[[]],[[]],[[],43],[43],[[]],[43,6],[[]],[[43,6,6],6],[43],[43],[[],3],[[],3],[[],4],0,[[]],[[]],[[],44],[44],[[]],[44,6],[[]],[[44,6],6],[44],[[],3],[[],3],[[],4],0,0,0,0,[[]],[[]],[[],45],[45],[[]],[[]],[45,2],[[45,[46,[13]]]],[[45,[46,[2]]]],[[45,[46,[6]]]],[[45,2,6,[46,[13]]],2],[45],[[],3],[[],3],[[],4],0,[[]],[[]],[[],47],[47],[[47,32],33],[34,47],[[]],[[]],[47,2],[47],[[47,2,6],2],[[],38],[47,2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],48],[48],[[]],[[]],[[48,2,6,41],2],[48],[48],[[],3],[[],3],[[],4],0,[[]],[[]],[[],49],[49],[[]],[[]],[[49,2,6,13],2],[49],[[],3],[[],3],[[],4],0,[[]],[[]],[[],50],[50],[[50,32],33],[[]],[34,50],[[]],[[50,2,6],2],[50],[[],38],[50],[[],3],[[],3],[[],4],0,[[51,39]],[[]],[[]],[[],51],[[51,32],33],[34,51],[[]],[[]],[[],38],[[],3],[[],3],[[],4]],"p":[[3,"Add16"],[3,"Signal16"],[4,"Result"],[3,"TypeId"],[3,"Alu"],[4,"Signal"],[3,"And"],[3,"And16"],[3,"Demux"],[3,"Demux4Way"],[4,"Signal2"],[3,"Demux8Way"],[3,"Signal3"],[3,"FullAdder"],[3,"HalfAdder"],[3,"Inc16"],[3,"Mux"],[3,"Mux16"],[3,"Mux4Way16"],[3,"Mux8Way16"],[3,"Nand"],[3,"Nand16"],[3,"Not"],[3,"Not16"],[3,"Or"],[3,"Or16"],[3,"Or16Way"],[3,"Or8Way"],[3,"Signal8"],[15,"bool"],[15,"i8"],[3,"Formatter"],[6,"Result"],[15,"i32"],[15,"u8"],[15,"i16"],[15,"u16"],[3,"String"],[15,"usize"],[3,"Range"],[3,"Signal6"],[3,"Xor"],[3,"Bit"],[3,"Dff"],[3,"Ram8"],[8,"Into"],[3,"Register16"],[3,"Ram64"],[3,"Ram8"],[3,"Register16"],[3,"Time"],[8,"Unit"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

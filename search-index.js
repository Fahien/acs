var searchIndex = JSON.parse('{\
"acs":{"doc":"Acs is an experimental project for learning computer â€¦","tn":["arch","asm","logic","mem","keyboard","memory","screen","Keyboard","borrow","borrow_mut","default","eval","from","into","out","try_from","try_into","type_id","Memory","borrow","borrow_mut","default","eval","from","into","sim","tick","try_from","try_into","type_id","Screen","as_bytes","borrow","borrow_mut","default","dump","eval","from","into","out","set_address","sim","tick","try_from","try_into","type_id","instruction","A","A","A","AD","AM","AMD","AMinusD","AMinusOne","APlusOne","AsmInstruction","AsmInstructionBuilder","C","Comp","D","D","DAndA","DAndM","DM","DMinusA","DMinusM","DMinusOne","DOrA","DOrM","DPlusA","DPlusM","DPlusOne","Dest","JEQ","JGE","JGT","JLE","JLT","JMP","JNE","Jump","Kind","M","M","MMinusD","MMinusOne","MPlusOne","MinusA","MinusD","MinusM","MinusOne","NOP","NotA","NotD","NotM","Null","One","Zero","a","assign_a_to_d","bitor","bitor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comp","default","default","dest","eq","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","from_str","into","into","into","into","into","into","jump","kind","ne","new","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","add16","alu","and","and16","demux","demux4way","demux8way","fulladder","halfadder","inc16","mux","mux16","mux4way16","mux8way16","nand","nand16","not","not16","or","or16","or16way","or8way","signal","signal12","signal13","signal14","signal15","signal16","signal2","signal3","signal6","signal8","signal9","unit","xor","Add16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Alu","borrow","borrow_mut","default","eval","from","into","out","sim","try_from","try_into","type_id","And","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","And16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux4Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","FullAdder","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HalfAdder","borrow","borrow_mut","default","eval","from","into","new","sim","try_from","try_into","type_id","Inc16","borrow","borrow_mut","default","eval","from","get_out","into","sim","try_from","try_into","type_id","Mux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux16","borrow","borrow_mut","default","eval","from","into","out","set_a","sim","try_from","try_into","type_id","Mux4Way16","borrow","borrow_mut","default","eval","from","into","sel","sim","try_from","try_into","type_id","Mux8Way16","borrow","borrow_mut","default","eval","from","into","sel","sim","try_from","try_into","type_id","Nand","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Nand16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HI","LO","Signal","as_bool","bitand","bitand_assign","bitor_assign","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal12","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal13","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal14","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal15","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal16","TRUE","add","add","bitand","bitor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","get","into","neg","new","not","set","sub","sub","to_owned","to_string","try_from","try_into","type_id","values","FALSE","HIHI","HILO","LOHI","LOLO","Signal2","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal3","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal6","TRUE","as_u8","as_usize","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal8","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal9","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","Unit","eval","tick","tock","Xor","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","bit","counter","dff","fast","ram16k","ram4k","ram512","ram64","ram8","register16","time","Bit","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","tock","try_from","try_into","type_id","Counter","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","tock","try_from","try_into","type_id","Dff","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","try_from","try_into","type_id","ram","ram16k","ram4k","ram512","ram64","ram8","register16","Ram16k","borrow","borrow_mut","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram4k","borrow","borrow_mut","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram512","borrow","borrow_mut","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram64","borrow","borrow_mut","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram8","borrow","borrow_mut","default","eval","from","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Register16","borrow","borrow_mut","default","eval","fmt","from","from","into","out","run","sim","to_string","tock","try_from","try_into","type_id","Ram16k","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram4k","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram512","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram64","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram8","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Register16","borrow","borrow_mut","default","eval","fmt","from","from","get_out","into","sim","tick","to_string","tock","try_from","try_into","type_id","Time","add_assign","borrow","borrow_mut","default","fmt","from","from","into","to_string","try_from","try_into","type_id"],"q":["acs","","","","acs::arch","","","acs::arch::keyboard","","","","","","","","","","","acs::arch::memory","","","","","","","","","","","","acs::arch::screen","","","","","","","","","","","","","","","","acs::asm","acs::asm::instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::add16","","","","","","","","","","","acs::logic::alu","","","","","","","","","","","","acs::logic::and","","","","","","","","","","","acs::logic::and16","","","","","","","","","","","acs::logic::demux","","","","","","","","","","","acs::logic::demux4way","","","","","","","","","","","acs::logic::demux8way","","","","","","","","","","","acs::logic::fulladder","","","","","","","","","","","acs::logic::halfadder","","","","","","","","","","","","acs::logic::inc16","","","","","","","","","","","","acs::logic::mux","","","","","","","","","","","acs::logic::mux16","","","","","","","","","","","","","acs::logic::mux4way16","","","","","","","","","","","","acs::logic::mux8way16","","","","","","","","","","","","acs::logic::nand","","","","","","","","","","","acs::logic::nand16","","","","","","","","","","","acs::logic::not","","","","","","","","","","","acs::logic::not16","","","","","","","","","","","acs::logic::or","","","","","","","","","","","acs::logic::or16","","","","","","","","","","","acs::logic::or16way","","","","","","","","","","","acs::logic::or8way","","","","","","","","","","","acs::logic::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal12","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal13","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal14","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal15","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal16","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal6","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal8","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal9","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::unit","","","","acs::logic::xor","","","","","","","","","","","acs::mem","","","","","","","","","","","acs::mem::bit","","","","","","","","","","","","","","acs::mem::counter","","","","","","","","","","","","","","acs::mem::dff","","","","","","","","","","","","","acs::mem::fast","","","","","","","acs::mem::fast::ram16k","","","","","","","","","","","","","","","","acs::mem::fast::ram4k","","","","","","","","","","","","","","","","acs::mem::fast::ram512","","","","","","","","","","","","","","","","acs::mem::fast::ram64","","","","","","","","","","","","","","","","acs::mem::fast::ram8","","","","","","","","","","","","","","","","acs::mem::fast::register16","","","","","","","","","","","","","","","","","acs::mem::ram16k","","","","","","","","","","","","","acs::mem::ram4k","","","","","","","","","","","","","acs::mem::ram512","","","","","","","","","","","","","acs::mem::ram64","","","","","","","","","","","","","acs::mem::ram8","","","","","","","","","","","","","acs::mem::register16","","","","","","","","","","","","","","","","","acs::mem::time","","","","","","","","","","","",""],"d":["","","","","","","","Built-in register chip acting as a keyboard","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the 16-bit character code of the currently pressed â€¦","","","","Package of three 16-bit chip parts: <code>Ram16k</code>, <code>Screen</code>, and â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","512x256 black-and-white screen which behaves like a <code>Ram8k</code>.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","","A-instructions start with <code>0</code>","A register","","A and D register","A register and RAM[A]","A and D register and RAM[A]","","","","","","C-instructions start with <code>111</code>","Comp part of a C-instruction. Format is this: â€¦","D register","","","","D register and RAM[A]","","","","","","","","","Where to store <code>Comp</code>. Format is this: <code>**** **** **dd d***</code>","Jump if <code>comp == 0</code>","Jump if <code>comp &gt;= 0</code>","Jump if <code>comp &gt; 0</code>","Jump if <code>comp &lt;= 0</code>","Jump if <code>comp &lt; 0</code>","Unconditional jump","Jump if <code>comp != 0</code>","Jump part of a C-instruction. Format is: â€¦","","RAM[A]","","","","","","","","","No jump","","","","Value is not stored","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The Add16 chip is able to add two 16-bit numbers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a + b</code> (overflowing â€¦","","","","Arithmetic Logic Unit","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the ALU simulation.","","","","The AND gate is built using a NOT and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a AND b</code>","","","","Similar to the AND gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The Demultiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","4-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","8-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","By means of two Half-adders, the Full-adder is able to add â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation but computing <code>a + b + c</code> and â€¦","","","","The Half-adder chip is able to add together 2 binary â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation but computing <code>a + b</code> and returns â€¦","","","","The Inc16 chip is able to add 1 to a given number.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>inp + 1</code> â€¦","","","","The Multiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>sel ? b : a</code>","","","","Similar to the Mux gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Carries out the simulation and returns <code>sel ? b : a</code> over â€¦","","","","4-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation and returns","","","","8-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation and returns","","","","The NAND gate is the only built-in logic component","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a NAND b</code>","","","","Similar to the Nand gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The NOT gate is built using a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>NOT inp</code>","","","","Similar to the Not gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The OR gate is built using two NOTs and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a OR b</code>","","","","Similar to the Or gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","16-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","8-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","12 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","13 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","14 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","15 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","16 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","All signals <code>LO</code>","","","","","2 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","3 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","6 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","8 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","9 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Common operations for a logic unit.","Evaluates the logic expression as we do with arithmetic â€¦","Carries out the tick-phase of a clock cycle: LOW","Carries out the tock-phase of a clock cycle: HIGH","The XOR gate is built using a NAND, an OR, and an AND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a XOR b</code>","","","","","","","","","","","","","","","Single-bit register, storing <code>0</code> or <code>1</code> over time.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","Memory device which can increment its value in every time â€¦","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","Data Flip-Flop","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>inp</code> at <code>t-1</code>","","","","","","","","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast 16-bit register which, as opposed to the other â€¦","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 16k 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 4k 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 512 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 64 16-bit register (8 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 8 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","16-bit register, behaving exactly like a 1-bit register, â€¦","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","","Helper class for keeping track of time, advancing every â€¦","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,5,5,5,5,5,5,5,5,5,5,5,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,19,17,20,17,17,17,20,20,20,0,0,19,0,17,20,20,20,17,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,0,0,17,20,20,20,20,20,20,20,20,21,20,20,20,17,20,20,16,16,16,17,19,17,20,21,16,18,19,17,20,21,16,18,18,16,19,17,20,21,16,18,19,17,20,21,16,18,18,16,18,18,16,16,16,19,17,17,20,21,16,16,18,17,20,21,19,17,20,21,16,18,18,18,16,18,19,17,20,21,16,18,19,17,20,21,16,18,19,17,20,21,16,18,19,17,20,21,16,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,26,26,26,26,26,26,26,26,26,0,27,27,27,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,28,28,0,29,29,29,29,29,29,29,29,29,29,0,30,30,30,30,30,30,30,30,30,30,0,31,31,31,31,31,31,31,31,31,31,0,33,33,33,33,33,33,33,33,33,33,0,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,37,0,38,38,38,38,38,38,38,38,38,38,0,39,39,39,39,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,41,41,41,41,41,41,0,42,42,42,42,42,42,42,42,42,42,0,43,43,43,43,43,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,0,45,45,45,45,45,45,45,45,45,45,0,46,46,46,46,46,46,46,46,46,46,0,47,47,47,47,47,47,47,47,47,47,0,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,56,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,57,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,60,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,50,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,61,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,79,79,79,0,62,62,62,62,62,62,62,62,62,62,0,0,0,0,0,0,0,0,0,0,0,0,63,63,63,63,63,63,63,63,63,63,63,63,63,0,64,64,64,64,64,64,64,64,64,64,64,64,64,0,65,65,65,65,65,65,65,65,65,65,65,65,0,0,0,0,0,0,0,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,72,72,72,72,72,72,72,72,72,72,72,72,0,73,73,73,73,73,73,73,73,73,73,73,73,0,74,74,74,74,74,74,74,74,74,74,74,74,0,75,75,75,75,75,75,75,75,75,75,75,75,0,76,76,76,76,76,76,76,76,76,76,76,76,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,78,78,78,78,78,78,78,78,78,78,78,78],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[1],[[]],[[]],[1,2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],5],[5],[[]],[[]],[[5,2,6,7],2],[5],[[],3],[[],3],[[],4],0,[8],[[]],[[]],[[],8],[[8,[10,[9]]],[[3,[[12,[11]]]]]],[8],[[]],[[]],[8,2],[[8,[14,[13]]]],[[8,2,6,13],2],[8],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,16],[[],16],[[16,17]],[[17,17]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,16],[[],18],[19,19],[17,17],[20,20],[21,21],[16,16],[18,18],[[]],[[]],[[]],[[]],[[]],[[]],[[18,20],18],[[],16],[[],18],[[18,17],18],[[16,16],22],[[16,23],24],[[16,23],24],[[]],[[]],[15,17],[[]],[[]],[15,16],[[]],[[]],[25,[[3,[17]]]],[25,[[3,[20]]]],[25,[[3,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[18,21],18],[[18,19],18],[[16,16],22],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[18,15],18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],26],[26],[[]],[[]],[[26,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],27],[27],[[]],[[]],[27,2],[[27,2,2,6,6,6,6,6,6]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],28],[28],[[]],[[]],[[28,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],29],[29],[[]],[[]],[[29,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],30],[30],[[]],[[]],[[30,6,6]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],31],[31],[[]],[[]],[[31,6,32]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],33],[33],[[]],[[]],[[33,6,34]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],35],[35],[[]],[[]],[[35,6,6,6]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],36],[36],[[]],[[]],[[6,6],36],[[36,6,6]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],37],[37],[[]],[37,2],[[]],[[37,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],38],[38],[[]],[[]],[[38,6,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],39],[39],[[]],[[]],[39,2],[[39,2]],[[39,2,2,6],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],40],[40],[[]],[[]],[40,32],[[40,32],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],41],[41],[[]],[[]],[41,34],[[41,34],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],42],[42],[[]],[[]],[[42,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],43],[43],[[]],[[]],[[43,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],44],[44],[[]],[[]],[[44,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],45],[45],[[]],[[]],[[45,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],46],[46],[[]],[[]],[[46,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],47],[47],[[]],[[]],[[47,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],48],[48],[[]],[[]],[[48,2],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],49],[49],[[]],[[]],[[49,50],6],[[],3],[[],3],[[],4],0,0,0,[6,22],[[6,6]],[[6,6]],[[6,6]],[[]],[[]],[6,6],[[]],[[],6],[[6,6],22],[[6,51],22],[[6,23],24],[[6,23],24],[52,6],[15,6],[53,6],[54,6],[51,6],[22,6],[[]],[[]],[51,6],[6],[[]],[[],55],[[],3],[[],3],[[],4],0,0,0,[[56,56]],[[]],[[]],[56,56],[[]],[[],56],[[56,56],22],[[56,23],24],[[56,23],24],[54,56],[57,56],[53,56],[[]],[7,56],[[56,[59,[58]]],53],[[]],[53,56],[56],[[]],[[],55],[[],3],[[],3],[[],4],0,0,0,[[13,13]],[[]],[[]],[13,13],[[]],[[],13],[[13,13],22],[[13,23],24],[[13,23],24],[[]],[7,13],[54,13],[53,13],[[13,[59,[58]]],53],[[]],[53,13],[13],[[]],[[],55],[[],3],[[],3],[[],4],0,0,0,0,[[57,57]],[[]],[[]],[57,57],[[]],[[],57],[[57,57],22],[[57,23],24],[[57,23],24],[53,57],[54,57],[7,57],[[]],[[57,[59,[58]]],53],[[]],[[57,57],22],[53,57],[57],[[]],[[],55],[[],3],[[],3],[[],4],0,0,0,0,[[7,7]],[[]],[[]],[7,7],[[]],[[],7],[[7,7],22],[[7,23],24],[[7,23],24],[54,7],[53,7],[2,7],[[]],[[7,[59,[58]]],53],[[]],[[7,7],22],[53,7],[7],[[]],[[],55],[[],3],[[],3],[[],4],0,0,0,0,[[2,53]],[[2,2]],[[2,2]],[[2,2]],[[]],[[]],[2,2],[[]],[[],2],[[2,2],22],[[2,23],24],[[2,23],24],[7,2],[[]],[54,2],[15,2],[53,2],[6,2],[[2,[59,[58]]],53],[[]],[2],[53,2],[2],[[2,58,6]],[[2,53]],[[2,2]],[[]],[[],55],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,0,[[32,32]],[[]],[[]],[32,32],[[]],[[],32],[[32,32],22],[[32,23],24],[[32,23],24],[53,32],[51,32],[34,32],[54,32],[15,32],[[]],[[32,58],51],[[]],[51,32],[32],[[]],[[],55],[[],3],[[],3],[[],4],0,0,0,[[34,34]],[[]],[[]],[34,34],[[]],[[],34],[[34,34],22],[[34,23],24],[[34,23],24],[[]],[51,34],[54,34],[60,34],[52,34],[15,34],[53,34],[[34,58],51],[[]],[[34,34],22],[51,34],[34],[[]],[[],55],[[],3],[[],3],[[],4],0,0,0,[60,52],[60,58],[[60,60]],[[]],[[]],[60,60],[[]],[[],60],[[60,60],22],[[60,23],24],[[60,23],24],[54,60],[52,60],[[]],[61,60],[[60,[59,[58]]],51],[[]],[51,60],[60],[[]],[[],55],[[],3],[[],3],[[],4],0,0,0,0,[[50,50]],[[]],[[]],[50,50],[[]],[[],50],[[50,50],22],[[50,23],24],[[50,23],24],[52,50],[53,50],[15,50],[54,50],[[]],[[50,58],51],[[]],[[50,50],22],[51,50],[50],[[]],[[],55],[[],3],[[],3],[[],4],0,0,0,0,[[61,61]],[[]],[[]],[61,61],[[]],[[],61],[[61,61],22],[[61,23],24],[[61,23],24],[54,61],[56,61],[53,61],[[]],[[61,[59,[58]]],53],[[]],[53,61],[61],[[]],[[],55],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],0,[[]],[[]],[[],62],[62],[[]],[[]],[[62,6,6],6],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],63],[63],[[]],[63,6],[[]],[[63,6,6],6],[63],[63],[[],3],[[],3],[[],4],0,[[]],[[]],[[],64],[64],[[]],[64,2],[[]],[[64,2,6,6,6],2],[64],[64],[[],3],[[],3],[[],4],0,[[]],[[]],[[],65],[65],[[]],[65,6],[[]],[[65,6],6],[65],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,0,[[]],[[]],[[],66],[66],[[]],[[]],[66,2],[[66,[14,[57]]]],[[66,[14,[2]]]],[[66,[14,[6]]]],[[66,2,6,[14,[57]]],2],[66],[[],3],[[],3],[[],4],0,[[]],[[]],[[],67],[67],[[]],[[]],[67,2],[[67,[14,[56]]]],[[67,[14,[2]]]],[[67,[14,[6]]]],[[67,2,6,[14,[56]]],2],[67],[[],3],[[],3],[[],4],0,[[]],[[]],[[],68],[68],[[]],[[]],[68,2],[[68,[14,[61]]]],[[68,[14,[2]]]],[[68,[14,[6]]]],[[68,2,6,[14,[61]]],2],[68],[[],3],[[],3],[[],4],0,[[]],[[]],[[],69],[69],[[]],[[]],[69,2],[[69,[14,[60]]]],[[69,[14,[2]]]],[[69,[14,[6]]]],[[69,2,6,[14,[60]]],2],[69],[[],3],[[],3],[[],4],0,[[]],[[]],[[],70],[70],[[]],[[]],[70,2],[[70,[14,[34]]]],[[70,[14,[2]]]],[[70,[14,[6]]]],[[70,2,6,[14,[34]]],2],[70],[[],3],[[],3],[[],4],0,[[]],[[]],[[],71],[71],[[71,23],24],[[]],[54,71],[[]],[71,2],[71],[[71,2,6],2],[[],55],[71,2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],72],[72],[[]],[[]],[[72,2,6,57],2],[72],[72],[[],3],[[],3],[[],4],0,[[]],[[]],[[],73],[73],[[]],[[]],[[73,2,6,56],2],[73],[73],[[],3],[[],3],[[],4],0,[[]],[[]],[[],74],[74],[[]],[[]],[[74,2,6,61],2],[74],[74],[[],3],[[],3],[[],4],0,[[]],[[]],[[],75],[75],[[]],[[]],[[75,2,6,60],2],[75],[75],[[],3],[[],3],[[],4],0,[[]],[[]],[[],76],[76],[[]],[[]],[[76,2,6,34],2],[76],[76],[[],3],[[],3],[[],4],0,[[]],[[]],[[],77],[77],[[77,23],24],[54,77],[[]],[77,2],[[]],[[77,2,6],2],[77],[[],55],[77],[[],3],[[],3],[[],4],0,[[78,58]],[[]],[[]],[[],78],[[78,23],24],[54,78],[[]],[[]],[[],55],[[],3],[[],3],[[],4]],"p":[[3,"Keyboard"],[3,"Signal16"],[4,"Result"],[3,"TypeId"],[3,"Memory"],[4,"Signal"],[3,"Signal15"],[3,"Screen"],[3,"Path"],[8,"AsRef"],[8,"Error"],[3,"Box"],[3,"Signal13"],[8,"Into"],[15,"u16"],[3,"AsmInstruction"],[4,"Dest"],[3,"AsmInstructionBuilder"],[4,"Kind"],[4,"Comp"],[4,"Jump"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Add16"],[3,"Alu"],[3,"And"],[3,"And16"],[3,"Demux"],[3,"Demux4Way"],[4,"Signal2"],[3,"Demux8Way"],[3,"Signal3"],[3,"FullAdder"],[3,"HalfAdder"],[3,"Inc16"],[3,"Mux"],[3,"Mux16"],[3,"Mux4Way16"],[3,"Mux8Way16"],[3,"Nand"],[3,"Nand16"],[3,"Not"],[3,"Not16"],[3,"Or"],[3,"Or16"],[3,"Or16Way"],[3,"Or8Way"],[3,"Signal8"],[15,"i8"],[15,"u8"],[15,"i16"],[15,"i32"],[3,"String"],[3,"Signal12"],[3,"Signal14"],[15,"usize"],[3,"Range"],[3,"Signal6"],[3,"Signal9"],[3,"Xor"],[3,"Bit"],[3,"Counter"],[3,"Dff"],[3,"Ram16k"],[3,"Ram4k"],[3,"Ram512"],[3,"Ram64"],[3,"Ram8"],[3,"Register16"],[3,"Ram16k"],[3,"Ram4k"],[3,"Ram512"],[3,"Ram64"],[3,"Ram8"],[3,"Register16"],[3,"Time"],[8,"Unit"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

var searchIndex = JSON.parse('{\
"acs":{"doc":"Acs is an experimental project for learning computer …","t":[0,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,10,11,11,3,11,11,11,11,11,11,11,11,11,11],"n":["logic","and","demux","mux","nand","nand16","not","or","signal","signal16","unit","xor","And","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Nand","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Nand16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HI","LO","Signal","as_bool","bitand","bitand_assign","bitor_assign","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","fmt","from","from","from","from","from","from","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal16","TRUE","bitand","bitor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","set","to_owned","to_string","try_from","try_into","type_id","values","Unit","eval","tick","tock","Xor","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id"],"q":["acs","acs::logic","","","","","","","","","","","acs::logic::and","","","","","","","","","","","acs::logic::demux","","","","","","","","","","","acs::logic::mux","","","","","","","","","","","acs::logic::nand","","","","","","","","","","","acs::logic::nand16","","","","","","","","","","","acs::logic::not","","","","","","","","","","","acs::logic::or","","","","","","","","","","","acs::logic::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal16","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::unit","","","","acs::logic::xor","","","","","","","","","",""],"d":["","","","","","","","","","","","","The AND gate is built using a NOT and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a AND b</code>","","","","The Demultiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns …","","","","The Multiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>sel ? b : a</code>","","","","The NAND gate is the only built-in logic component","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a NAND b</code>","","","","Similar to the Nand gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","The NOT gate is built using a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>NOT inp</code>","","","","The OR gate is built using two NOTs and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a OR b</code>","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","16 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Common operations for a logic unit","Evaluates the logic expression as we do with arithmetic","Carries out the tick-phase of a clock cycle: LOW","Carries out the tock-phase of a clock cycle: HIGH","The XOR gate is built using a NAND, an OR, and an AND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a XOR b</code>","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,0,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,24,24,24,0,23,23,23,23,23,23,23,23,23,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[1],[[]],[[]],[[1,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],5],[5],[[]],[[]],[[5,2,2]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],6],[6],[[]],[[]],[[6,2,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],7],[7],[[]],[[]],[[7,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],8],[8],[[]],[[]],[[8,9,9],9],[[],3],[[],3],[[],4],0,[[]],[[]],[[],10],[10],[[]],[[]],[[10,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],11],[11],[[]],[[]],[[11,2,2],2],[[],3],[[],3],[[],4],0,0,0,[2,12],[[2,2]],[[2,2]],[[2,2]],[[]],[[]],[2,2],[[]],[[],2],[[2,2],12],[[2,13],12],[[2,14],15],[[2,14],15],[16,2],[17,2],[18,2],[19,2],[12,2],[[]],[[]],[13,2],[2],[[]],[[],20],[[],3],[[],3],[[],4],0,0,0,[[9,9]],[[9,9]],[[]],[[]],[9,9],[[]],[[],9],[[9,9],12],[[9,14],15],[[9,14],15],[2,9],[18,9],[[]],[19,9],[[9,[22,[21]]],18],[[]],[18,9],[9],[[9,21,2]],[[]],[[],20],[[],3],[[],3],[[],4],0,0,[[]],[[]],[[]],0,[[]],[[]],[[],23],[23],[[]],[[]],[[23,2,2],2],[[],3],[[],3],[[],4]],"p":[[3,"And"],[4,"Signal"],[4,"Result"],[3,"TypeId"],[3,"Demux"],[3,"Mux"],[3,"Nand"],[3,"Nand16"],[3,"Signal16"],[3,"Not"],[3,"Or"],[15,"bool"],[15,"i8"],[3,"Formatter"],[6,"Result"],[15,"u8"],[15,"i32"],[15,"i16"],[15,"u16"],[3,"String"],[15,"usize"],[3,"Range"],[3,"Xor"],[8,"Unit"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

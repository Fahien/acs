var searchIndex = JSON.parse('{\
"acs":{"doc":"Acs is an experimental project for learning computer â€¦","tn":["arch","asm","cal","logic","mem","vm","computer","cpu","fast","keyboard","memory","rom32k","screen","Computer","borrow","borrow_mut","default","eval","from","get_keyboard_mut","get_memory","get_memory_mut","get_screen","into","reset","set_instructions","tick","ticktock","tock","try_from","try_into","type_id","Cpu","borrow","borrow_mut","default","eval","from","get_address_m","get_out_m","get_pc","get_write_m","into","sim","tick","tock","try_from","try_into","type_id","cpu","memory","Cpu","a_register","address_m","borrow","borrow_mut","d_register","default","eval","from","get_address_m","get_out_m","get_pc","get_write_m","in_m","instruction","into","out_m","pc","reset","sim","tick","tock","try_from","try_into","type_id","write_m","Memory","address","borrow","borrow_mut","default","eval","from","get_keyboard_mut","get_screen","inp","into","keyboard","load","out","out","ram","screen","selected","sim","tick","try_from","try_into","type_id","Keyboard","borrow","borrow_mut","default","eval","from","into","out","set","try_from","try_into","type_id","unset","Memory","address","borrow","borrow_mut","default","eval","from","get_keyboard_mut","get_screen","inp","into","load","out","sim","tick","try_from","try_into","type_id","Rom32k","borrow","borrow_mut","default","eval","from","get_index","get_instruction","into","out","set_address","set_instructions","sim","try_from","try_into","type_id","Screen","as_bytes","borrow","borrow_mut","default","dump","eval","from","get_height","get_pixel","get_width","into","out","set_address","sim","tick","try_from","try_into","type_id","assembler","instruction","Assembler","assemble","borrow","borrow_mut","default","from","into","new","resolve","translate","try_from","try_into","type_id","A","A","A","AD","AM","AMD","AMinusD","AMinusOne","APlusOne","AsmInstruction","C","Comp","D","D","DAndA","DAndM","DM","DMinusA","DMinusM","DMinusOne","DOrA","DOrM","DPlusA","DPlusM","DPlusOne","Dest","Eq","Ge","Gt","Jump","Jump","Label","Le","Lt","M","M","MMinusD","MMinusOne","MPlusOne","MinusA","MinusD","MinusM","MinusOne","Ne","No","NotA","NotD","NotM","Null","One","Symbol","Zero","bitor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","hash","hash","hash","hash","into","into","into","into","ne","parse","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","0","1","2","compiler","expression","generator","parser","statement","structure","symboltable","tokenizer","Compile","compile","compile","Call","Expression","IntLiteral","Term","Variable","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","into","into","ne","ne","new","term","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","1","Generate","Generator","borrow","borrow_mut","default","from","gen","gen_expression","gen_function","gen_let","gen_module","gen_return","gen_statement","gen_statements","generate","generate","into","try_from","try_into","type_id","Parser","borrow","borrow_mut","count_local_variables","from","into","new","parse","parse_expression","parse_function","parse_let","parse_module","parse_parameters","parse_statement","parse_statements","try_from","try_into","type_id","Expression","Let","Return","Statement","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","ne","to_owned","try_from","try_into","type_id","0","0","0","1","Field","Function","I16","Module","StructDec","Type","Variable","Void","body_statements","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fields","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","functions","into","into","into","into","into","into","local_count","name","name","name","name","name","ne","ne","ne","ne","ne","new","new","new","parameters","return_type","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","SymbolEntry","SymbolTable","borrow","borrow","borrow_mut","borrow_mut","default","from","from","get_segment_and_offset","insert_argument","insert_local","into","into","new","offset","segment","try_from","try_from","try_into","try_into","type_id","type_id","variable","Assign","Colon","Comma","Function","I16","Identifier","Integer","Keyword","Keyword","LeftBrace","LeftParen","Let","MAP","Return","RightArrow","RightBrace","RightParen","Semicolon","Symbol","Symbol","Token","Tokenize","Tokens","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref_mut","eat_identifier","eat_integer","eat_keyword","eat_symbol","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","into","into","into","into","ne","new","peek_symbol","skip","to_owned","to_owned","to_owned","tokenize","tokenize","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","0","add16","alu","and","and16","demux","demux4way","demux8way","fast","fulladder","halfadder","inc16","mux","mux16","mux4way16","mux8way16","nand","nand16","not","not16","or","or16","or16way","or8way","signal","signal12","signal13","signal14","signal15","signal16","signal2","signal3","signal6","signal8","signal9","unit","xor","Add16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Alu","borrow","borrow_mut","default","eval","from","into","out","set_x","set_y","sim","try_from","try_into","type_id","And","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","And16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux4Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","alu","Alu","borrow","borrow_mut","default","eval","f","from","into","ng","no","nx","ny","out","out","set_x","set_y","sim","try_from","try_into","type_id","x","y","zr","zx","zy","FullAdder","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HalfAdder","borrow","borrow_mut","default","eval","from","into","new","sim","try_from","try_into","type_id","Inc16","borrow","borrow_mut","default","eval","from","get_out","into","sim","try_from","try_into","type_id","Mux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux16","borrow","borrow_mut","default","eval","from","into","out","set_a","sim","try_from","try_into","type_id","Mux4Way16","borrow","borrow_mut","default","eval","from","into","sel","sim","try_from","try_into","type_id","Mux8Way16","borrow","borrow_mut","default","eval","from","into","sel","sim","try_from","try_into","type_id","Nand","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Nand16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HI","LO","Signal","as_bool","bitand","bitand_assign","bitor","bitor_assign","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal12","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal13","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal14","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal15","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal16","TRUE","add","add","add_assign","bitand","bitor","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","get","get_values","get_values_mut","into","neg","new","not","partial_cmp","set","sub","sub","sub","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id","values","FALSE","HIHI","HILO","LOHI","LOLO","Signal2","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal3","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal6","TRUE","as_u8","as_usize","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal8","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal9","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","Unit","eval","tick","tock","Xor","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","bit","counter","dff","fast","ram16k","ram4k","ram512","ram64","ram8","register16","time","Bit","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","tock","try_from","try_into","type_id","Counter","borrow","borrow_mut","default","eval","from","into","out","sim","tick","tock","try_from","try_into","type_id","Dff","borrow","borrow_mut","default","eval","from","get_out","into","sim","tick","try_from","try_into","type_id","counter","ram","ram16k","ram4k","ram512","ram64","ram8","register16","Counter","borrow","borrow_mut","default","eval","from","inc","inp","into","load","out","out","reset","sim","tick","tock","try_from","try_into","type_id","Ram16k","borrow","borrow_mut","data","default","eval","from","index","index_mut","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram4k","borrow","borrow_mut","data","default","eval","from","index","index_mut","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram512","borrow","borrow_mut","data","default","eval","from","index","index_mut","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram64","borrow","borrow_mut","data","default","eval","from","index","index_mut","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Ram8","borrow","borrow_mut","data","default","eval","from","index","index_mut","into","out","set_address","set_inp","set_load","sim","tick","try_from","try_into","type_id","Register16","borrow","borrow_mut","default","eval","fmt","from","from","into","out","run","sim","to_string","tock","try_from","try_into","type_id","Ram16k","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram4k","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram512","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram64","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Ram8","borrow","borrow_mut","default","eval","from","into","sim","tick","tock","try_from","try_into","type_id","Register16","borrow","borrow_mut","default","eval","fmt","from","from","get_out","into","sim","tick","to_string","tock","try_from","try_into","type_id","Time","add_assign","borrow","borrow_mut","default","fmt","from","from","into","to_string","try_from","try_into","type_id","code","emulator","instruction","preprocessor","segment","translator","VmCode","borrow","borrow_mut","code","from","into","name","new","try_from","try_into","type_id","VmEmulator","borrow","borrow_mut","default","from","get_segment_address","into","load","pop","pop_into","push","push_from","ram","set","step","try_from","try_into","type_id","Add","And","Call","Eq","Function","Goto","Gt","IfGoto","Label","Lt","Neg","Not","Or","Pop","Push","Return","Sub","VmInstruction","borrow","borrow_mut","clone","clone_into","fmt","from","from_str","into","parse","to_owned","try_from","try_into","type_id","0","0","0","0","0","0","0","0","1","1","1","1","VmPreprocessedCode","VmPreprocessedCodeBuilder","borrow","borrow","borrow_mut","borrow_mut","build","builder","default","default","from","from","get_lines","include","include_all","into","into","lines","try_from","try_from","try_into","try_into","type_id","type_id","Argument","Constant","Local","Pointer","R13","R14","R15","Segment","Stack","Static","Temp","That","This","borrow","borrow_mut","clone","clone_into","fmt","from","from_str","get_base_address","into","to_owned","try_from","try_into","type_id","VmTranslator","borrow","borrow_mut","default","from","gen_add","gen_neg","gen_not","gen_sub","into","translate","translate","try_from","try_into","type_id"],"q":["acs","","","","","","acs::arch","","","","","","","acs::arch::computer","","","","","","","","","","","","","","","","","","","acs::arch::cpu","","","","","","","","","","","","","","","","","acs::arch::fast","","acs::arch::fast::cpu","","","","","","","","","","","","","","","","","","","","","","","","","","acs::arch::fast::memory","","","","","","","","","","","","","","","","","","","","","","","acs::arch::keyboard","","","","","","","","","","","","","acs::arch::memory","","","","","","","","","","","","","","","","","","acs::arch::rom32k","","","","","","","","","","","","","","","","acs::arch::screen","","","","","","","","","","","","","","","","","","","acs::asm","","acs::asm::assembler","","","","","","","","","","","","","acs::asm::instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::asm::instruction::AsmInstruction","","","","","","acs::cal","","","","","","","","acs::cal::compiler","","","acs::cal::expression","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::cal::expression::Term","","","","acs::cal::generator","","","","","","","","","","","","","","","","","","","","acs::cal::parser","","","","","","","","","","","","","","","","","","acs::cal::statement","","","","","","","","","","","","","","","","","acs::cal::statement::Statement","","","","acs::cal::structure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::cal::symboltable","","","","","","","","","","","","","","","","","","","","","","","","acs::cal::tokenizer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::cal::tokenizer::Token","","","","acs::logic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::add16","","","","","","","","","","","acs::logic::alu","","","","","","","","","","","","","","acs::logic::and","","","","","","","","","","","acs::logic::and16","","","","","","","","","","","acs::logic::demux","","","","","","","","","","","acs::logic::demux4way","","","","","","","","","","","acs::logic::demux8way","","","","","","","","","","","acs::logic::fast","acs::logic::fast::alu","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::fulladder","","","","","","","","","","","acs::logic::halfadder","","","","","","","","","","","","acs::logic::inc16","","","","","","","","","","","","acs::logic::mux","","","","","","","","","","","acs::logic::mux16","","","","","","","","","","","","","acs::logic::mux4way16","","","","","","","","","","","","acs::logic::mux8way16","","","","","","","","","","","","acs::logic::nand","","","","","","","","","","","acs::logic::nand16","","","","","","","","","","","acs::logic::not","","","","","","","","","","","acs::logic::not16","","","","","","","","","","","acs::logic::or","","","","","","","","","","","acs::logic::or16","","","","","","","","","","","acs::logic::or16way","","","","","","","","","","","acs::logic::or8way","","","","","","","","","","","acs::logic::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal12","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal13","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal14","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal15","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal16","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal6","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal8","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal9","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::unit","","","","acs::logic::xor","","","","","","","","","","","acs::mem","","","","","","","","","","","acs::mem::bit","","","","","","","","","","","","","","acs::mem::counter","","","","","","","","","","","","","","acs::mem::dff","","","","","","","","","","","","","acs::mem::fast","","","","","","","","acs::mem::fast::counter","","","","","","","","","","","","","","","","","","","acs::mem::fast::ram16k","","","","","","","","","","","","","","","","","","","acs::mem::fast::ram4k","","","","","","","","","","","","","","","","","","","acs::mem::fast::ram512","","","","","","","","","","","","","","","","","","","acs::mem::fast::ram64","","","","","","","","","","","","","","","","","","","acs::mem::fast::ram8","","","","","","","","","","","","","","","","","","","acs::mem::fast::register16","","","","","","","","","","","","","","","","","acs::mem::ram16k","","","","","","","","","","","","","acs::mem::ram4k","","","","","","","","","","","","","acs::mem::ram512","","","","","","","","","","","","","acs::mem::ram64","","","","","","","","","","","","","acs::mem::ram8","","","","","","","","","","","","","acs::mem::register16","","","","","","","","","","","","","","","","","acs::mem::time","","","","","","","","","","","","","acs::vm","","","","","","acs::vm::code","","","","","","","","","","","acs::vm::emulator","","","","","","","","","","","","","","","","","","acs::vm::instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::vm::instruction::VmInstruction","","","","","","","","","","","","acs::vm::preprocessor","","","","","","","","","","","","","","","","","","","","","","","","acs::vm::segment","","","","","","","","","","","","","","","","","","","","","","","","","","acs::vm::translator","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","The computer consists of three parts:","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Loads instructions into the ROM","","Advances one cicle","","","","","Central Processing Unit able to execute a given â€¦","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","","","Fast Central Processing Unit able to execute a given â€¦","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","Carries out the simulation, taking as input:","","","","","","","Fast package of three 16-bit chip parts: <code>Ram16k</code>, <code>Screen</code>, â€¦","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","Carries out the simulation, taking as input:","","","","","Built-in register chip acting as a keyboard","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the 16-bit character code of the currently pressed â€¦","","","","","","Package of three 16-bit chip parts: <code>Ram16k</code>, <code>Screen</code>, and â€¦","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","Instruction memory, preloaded with the required program.","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Carries out the simulation taking as input an address and â€¦","","","","512x256 black-and-white screen which behaves like a <code>Ram8k</code>.","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","","","The assembler translates programs written in asm language â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Resolves symbols in the assembly to physical memory â€¦","","","","","A-instructions start with <code>0</code>","A register","","A and D register","A register and <code>RAM[A]</code>","A and D register and <code>RAM[A]</code>","","","","","C-instructions start with <code>111</code>","Comp part of a C-instruction. Format is this: â€¦","D register","","","","D register and <code>RAM[A]</code>","","","","","","","","","Where to store <code>Comp</code>. Format is this: <code>**** **** **dd d***</code>","Jump if <code>comp == 0</code>","Jump if <code>comp &gt;= 0</code>","Jump if <code>comp &gt; 0</code>","Jump part of a C-instruction. Format is: â€¦","Unconditional jump","","Jump if <code>comp &lt;= 0</code>","Jump if <code>comp &lt; 0</code>","<code>RAM[A]</code>","","","","","","","","","Jump if <code>comp != 0</code>","No jump","","","","Value is not stored","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compiles Cal source code and returns a series of asm â€¦","Compiles Cal source code and returns a series of asm â€¦","Call a function with a list of arguments","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Generates VM instructions from parsed code.","","","","Returns the argument unchanged.","Generates VM instructions for a series of modules","","Generates VM instructions for a function","","Generates VM instructions for a module","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the number of local variables in the <code>statements</code>","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Number of local variables","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Each scope has its own symbol table, with its own number â€¦","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the segment and the offset of the variable with â€¦","Inserts a new argument variable in the symbol table and â€¦","Inserts a new local variable in the symbol table and â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","<code>=</code>","<code>:</code>,","<code>,</code>","","","Sequence of letters, digits, and underscore, not starting â€¦","","","","â€˜{â€™","â€˜(â€™","","","","â€˜-&gt;â€™","â€˜}â€™","â€˜)â€™","<code>;</code>","","","Useful for lexical analysys, with the tokenizer we â€¦","","This struct behaves like a peekable iterator of tokens â€¦","","","","","","","","","","","","","","","","","Eats an identifier and advances to the next token","Eats an integer and advances to the next token","Eats a keyword and advances to the next token","Eats a symbol and advances to the next token","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Peeks the next token and returns whether it is that symbol","Skips the next token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The Add16 chip is able to add two 16-bit numbers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a + b</code> (overflowing â€¦","","","","Arithmetic Logic Unit","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Carries out the ALU simulation.","","","","The AND gate is built using a NOT and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a AND b</code>","","","","Similar to the AND gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The Demultiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","4-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","8-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","","Arithmetic Logic Unit","","","","","False selects the &amp; functionTrue selects the + function","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Whether the output is negative","Negates the output","Negates x input","","","","","","Carries out the ALU simulation.","","","","","","Whether the output is zero","Set x input to zero","Set y input to zero","By means of two Half-adders, the Full-adder is able to add â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation but computing <code>a + b + c</code> and â€¦","","","","The Half-adder chip is able to add together 2 binary â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation but computing <code>a + b</code> and returns â€¦","","","","The Inc16 chip is able to add 1 to a given number.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>inp + 1</code> â€¦","","","","The Multiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>sel ? b : a</code>","","","","Similar to the Mux gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Carries out the simulation and returns <code>sel ? b : a</code> over â€¦","","","","4-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation and returns","","","","8-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation and returns","","","","The NAND gate is the only built-in logic component","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a NAND b</code>","","","","Similar to the Nand gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The NOT gate is built using a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>NOT inp</code>","","","","Similar to the Not gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","The OR gate is built using two NOTs and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a OR b</code>","","","","Similar to the Or gate, but it operates in bunches of 16 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation â€¦","","","","16-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","8-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","12 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","13 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","14 signals into one","All signals <code>HI</code>","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","15 signals into one","All signals <code>HI</code>","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","16 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","All signals <code>LO</code>","","","","","2 signals into one","All signals <code>HI</code>","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","3 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","6 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","8 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","9 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Common operations for a logic unit.","Evaluates the logic expression as we do with arithmetic â€¦","Carries out the tick-phase of a clock cycle: LOW","Carries out the tock-phase of a clock cycle: HIGH","The XOR gate is built using a NAND, an OR, and an AND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a XOR b</code>","","","","","","","","","","","","","","","Single-bit register, storing <code>0</code> or <code>1</code> over time.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","Memory device which can increment its value in every time â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation, taking as input:","","","","","","Data Flip-Flop","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>inp</code> at <code>t-1</code>","","","","","","","","","","","","","Fast memory device which can increment its value in every â€¦","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast RAM which, as opposed to the other RAMs, it does not â€¦","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Carries out the simulation, taking as input:","","","","","Fast 16-bit register which, as opposed to the other â€¦","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 16k 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 4k 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 512 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 64 16-bit register (8 â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","A Random Access Memory consisting of 8 16-bit registers","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","16-bit register, behaving exactly like a 1-bit register, â€¦","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Carries out the simulation, taking as input:","","","","","","","Helper class for keeping track of time, advancing every â€¦","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","A VmCode unit represents a file with VM instructions","","","VM instructions read from the file","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Name of the file","","","","","This emulator implements all the VM commands with Rust â€¦","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Loads a program into the emulator","Pops and returns the topmost element of the stack","Pops an element from the stack and stores it into â€¦","Pushes <code>value</code> on top of the stack","Pushes <code>segment[offset]</code> on top of the stack","","","Fetches the next instruction and executes it","","","","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x + y</code>","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x &amp; y</code>","Calls the function with that name with the number of â€¦","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x == y</code>","Marks the beginning of a function with a name and the â€¦","Unconditional jump to the location marked by the label","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x &gt; y</code>","Pops topmost value from stack and, if it is not <code>0</code>, jumps â€¦","Marks current code location for jumping","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x &lt; y</code>","Pops <code>x</code>, and pushes <code>-x</code>","Pops <code>x</code>, and pushes <code>~x</code> (bitwise not)","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x | y</code>","Pops an element from the stack and stores it into â€¦","Pushes <code>segment[index]</code> on top of the stack","Jumps to the command following the <code>Call</code> command that â€¦","Pops <code>y</code>, pops <code>x</code>, and pushes <code>x - y</code>","Sort of <em>intermediate code</em> designed to run on a stack â€¦","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Processes one or more VM code units into a vector of â€¦","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Arg address is at <code>RAM[2]</code>","Actually not a memory segment","Local address is at <code>RAM[1]</code>","Fixed memory segment pushing only <code>0</code> or <code>1</code> (<code>This</code>, <code>That</code>)","Helper registers for the VM translator","","","","Stack pointer address is at <code>RAM[0]</code>","Starts at <code>RAM[16]</code>, ends at <code>RAM[255]</code> included","8-place segment from <code>RAM[5]</code> to <code>RAM[12]</code>","That address is at <code>RAM[4]</code>","This address is at <code>RAM[3]</code>","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Translates VM instructions into a sequence of low-level â€¦","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Translates a VM program into a sequence of assembly â€¦","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,2,2,2,2,2,2,2,2,2,2,2,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,26,26,26,26,26,26,26,26,26,26,26,26,5,28,29,28,28,28,29,29,29,0,5,0,28,29,29,29,28,29,29,29,29,29,29,29,29,0,30,30,30,0,30,5,30,30,28,29,29,29,29,29,29,29,29,30,30,29,29,29,28,29,5,29,28,5,28,29,30,5,28,29,30,5,28,29,30,5,28,29,30,5,5,28,29,30,5,5,28,29,30,5,5,5,5,28,28,29,29,30,30,5,28,29,30,5,28,29,30,5,28,29,30,5,5,5,28,29,30,5,28,29,30,5,28,29,30,5,28,29,30,114,115,116,117,115,115,0,0,0,0,0,0,0,0,0,0,118,37,0,37,0,37,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,38,38,37,38,37,38,37,38,37,38,119,120,121,120,0,0,39,39,39,39,39,39,39,39,39,39,39,39,0,122,39,39,39,39,0,47,47,47,47,47,47,0,47,47,47,47,47,47,47,47,47,47,45,45,45,0,45,45,45,45,45,45,45,45,45,45,45,45,45,123,124,125,125,0,0,48,0,0,0,0,48,41,42,48,41,49,50,43,42,48,41,49,50,43,42,48,41,49,50,43,42,48,41,49,50,43,42,48,41,49,50,43,50,42,48,41,49,50,43,42,42,48,48,41,49,50,43,43,43,42,48,41,49,50,43,41,42,41,49,50,43,42,41,49,50,43,42,49,43,41,41,42,48,41,49,50,43,42,48,41,49,50,43,42,48,41,49,50,43,42,49,42,48,41,49,50,43,0,0,54,52,54,52,52,54,52,52,52,52,54,52,54,54,54,54,52,54,52,54,52,54,55,55,55,51,51,56,56,0,56,55,55,51,51,51,55,55,55,55,0,56,0,0,0,46,51,55,56,46,51,55,56,51,55,56,51,55,56,46,46,46,46,46,46,51,55,56,51,55,56,46,51,55,56,46,51,55,56,56,46,46,46,51,55,56,0,126,46,51,55,56,46,51,55,56,46,51,55,56,127,128,129,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,57,57,57,57,57,57,57,57,57,0,58,58,58,58,58,58,58,58,58,58,58,58,58,0,59,59,59,59,59,59,59,59,59,59,0,60,60,60,60,60,60,60,60,60,60,0,61,61,61,61,61,61,61,61,61,61,0,62,62,62,62,62,62,62,62,62,62,0,64,64,64,64,64,64,64,64,64,64,0,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,67,67,67,67,67,67,67,67,67,67,0,68,68,68,68,68,68,68,68,68,68,68,0,69,69,69,69,69,69,69,69,69,69,69,0,70,70,70,70,70,70,70,70,70,70,0,71,71,71,71,71,71,71,71,71,71,71,71,0,72,72,72,72,72,72,72,72,72,72,72,0,73,73,73,73,73,73,73,73,73,73,73,0,74,74,74,74,74,74,74,74,74,74,0,75,75,75,75,75,75,75,75,75,75,0,76,76,76,76,76,76,76,76,76,76,0,77,77,77,77,77,77,77,77,77,77,0,78,78,78,78,78,78,78,78,78,78,0,79,79,79,79,79,79,79,79,79,79,0,80,80,80,80,80,80,80,80,80,80,0,81,81,81,81,81,81,81,81,81,81,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,85,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,25,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,86,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,63,63,63,63,63,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,65,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,89,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,82,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,90,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,131,131,131,0,91,91,91,91,91,91,91,91,91,91,0,0,0,0,0,0,0,0,0,0,0,0,92,92,92,92,92,92,92,92,92,92,92,92,92,0,93,93,93,93,93,93,93,93,93,93,93,93,93,0,94,94,94,94,94,94,94,94,94,94,94,94,0,0,0,0,0,0,0,0,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,0,102,102,102,102,102,102,102,102,102,102,102,102,0,103,103,103,103,103,103,103,103,103,103,103,103,0,104,104,104,104,104,104,104,104,104,104,104,104,0,105,105,105,105,105,105,105,105,105,105,105,105,0,106,106,106,106,106,106,106,106,106,106,106,106,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,108,108,108,108,108,108,108,108,108,108,108,108,0,0,0,0,0,0,0,109,109,109,109,109,109,109,109,109,109,0,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,132,133,134,135,136,137,138,139,132,133,137,138,0,0,112,111,112,111,111,112,112,111,112,111,112,111,111,112,111,111,112,111,112,111,112,111,53,53,53,53,53,53,53,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,113,113,113,113,113,113,113,113,113,0,113,113,113,113],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[1],[[]],[1,2],[1,3],[1,3],[1,4],[[]],[1],[[1,[6,[5]]]],[1],[1],[1],[[],7],[[],7],[[],8],0,[[]],[[]],[[],9],[9],[[]],[9,10],[9,11],[9,11],[9,12],[[]],[[9,11,11,12]],[9],[9],[[],7],[[],7],[[],8],0,0,0,0,0,[[]],[[]],0,[[],13],[13],[[]],[13,10],[13,11],[13,11],[13,12],0,0,[[]],0,0,0,[[13,11,11,12]],[13],[13],[[],7],[[],7],[[],8],0,0,0,[[]],[[]],[[],3],[3],[[]],[3,2],[3,4],0,[[]],0,0,[3,11],0,0,0,0,[[3,11,12,10],11],[3],[[],7],[[],7],[[],8],0,[[]],[[]],[[],2],[2],[[]],[[]],[2,11],[[2,14]],[[],7],[[],7],[[],8],[[2,14]],0,0,[[]],[[]],[[],15],[15],[[]],[15,2],[15,4],0,[[]],0,[15,11],[[15,11,12,10],11],[15],[[],7],[[],7],[[],8],0,[[]],[[]],[[],16],[16],[[]],[16,17],[16,5],[[]],[16,11],[[16,[18,[10]]]],[[16,[6,[5]]]],[[16,10],11],[[],7],[[],7],[[],8],0,[4],[[]],[[]],[[],4],[[4,[20,[19]]],[[7,[[22,[21]]]]]],[4],[[]],[4,23],[[4,17,17],24],[4,23],[[]],[4,11],[[4,[18,[25]]]],[[4,11,12,25],11],[4],[[],7],[[],7],[[],8],0,0,0,[[26,[20,[27]]],[[6,[5]]]],[[]],[[]],[[],26],[[]],[[]],[[],26],[[26,[6,[5]]],[[6,[5]]]],[[[6,[27]]],[[6,[5]]]],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[28,28]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[28,28],[29,29],[30,30],[[]],[[]],[[]],[[]],[[],5],[[5,5],31],[[28,28],31],[[29,29],31],[[30,30],31],[[5,32],33],[[5,32],33],[[28,32],33],[[29,32],33],[[30,32],33],[[]],[24,5],[34,5],[35,5],[[]],[24,28],[[]],[24,29],[[]],[24,30],[27,[[7,[5]]]],[27,[[7,[28]]]],[27,[[7,[29]]]],[27,[[7,[30]]]],[5],[28],[29],[30],[[]],[[]],[[]],[[]],[[5,5],31],[27,[[6,[5]]]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[27,[[7,[[6,[5]],36]]]],[[],[[7,[[6,[5]],36]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[37,37],[38,38],[[]],[[]],[[37,37],31],[[38,38],31],[[37,32],33],[[38,32],33],[[]],[[]],[[]],[[]],[[37,37],31],[[38,38],31],[[[22,[37]]],38],0,[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,[[]],[[]],[[],39],[[]],[39,[[6,[40]]]],[[39,38],[[6,[40]]]],[[39,41],[[6,[40]]]],[[39,42,38],[[6,[40]]]],[[39,43],[[6,[40]]]],[[39,44],[[6,[40]]]],[[39,45],[[6,[40]]]],[39,[[6,[40]]]],[43,[[7,[[6,[40]],36]]]],[[],[[7,[[6,[40]],36]]]],[[]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],17],[[]],[[]],[46,47],[46,[[7,[43,36]]]],[47,[[7,[38,36]]]],[47,[[7,[41,36]]]],[47,[[7,[45,36]]]],[47,[[7,[43,36]]]],[47,[[7,[[6,[42]],36]]]],[47,[[7,[[44,[45]],36]]]],[47,[[7,[[6,[45]],36]]]],[[],7],[[],7],[[],8],0,0,0,0,[[]],[[]],[45,45],[[]],[[45,45],31],[[45,32],33],[[]],[[]],[[45,45],31],[[]],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,42],[48,48],[41,41],[49,49],[50,50],[43,43],[[]],[[]],[[]],[[]],[[]],[[]],[[42,42],31],[[48,48],31],[[41,41],31],[[49,49],31],[[50,50],31],[[43,43],31],0,[[42,32],33],[[48,32],33],[[41,32],33],[[49,32],33],[[50,32],33],[[43,32],33],[[]],[36,42],[[]],[51,48],[[]],[[]],[[]],[[]],[27,[[7,[43]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[42,42],31],[[41,41],31],[[49,49],31],[[50,50],31],[[43,43],31],[[36,48],42],[[36,48],49],[[[18,[36]],[6,[41]]],43],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,[[]],[[]],[[]],[[]],[[],52],[[]],[[]],[[52,27]],[[52,42]],[[52,42],24],[[]],[[]],[[42,53,24],54],0,0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51,51],[55,55],[56,56],[[]],[[]],[[]],[46],[46],[[46,27],[[7,[36]]]],[[46,34],[[7,[36]]]],[[46,51],[[7,[36]]]],[[46,55],[[7,[36]]]],[[51,51],31],[[55,55],31],[[56,56],31],[[51,32],33],[[55,32],33],[[56,32],33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[56,56],31],[27,46],[[46,55],31],[46],[[]],[[]],[[]],[27,46],[[],46],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],57],[57],[[]],[[]],[[57,11,11],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],58],[58],[[]],[[]],[58,11],[[58,11]],[[58,11]],[[58,11,11,12,12,12,12,12,12]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],59],[59],[[]],[[]],[[59,12,12],12],[[],7],[[],7],[[],8],0,[[]],[[]],[[],60],[60],[[]],[[]],[[60,11,11],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],61],[61],[[]],[[]],[[61,12,12]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],62],[62],[[]],[[]],[[62,12,63]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],64],[64],[[]],[[]],[[64,12,65]],[[],7],[[],7],[[],8],0,0,[[]],[[]],[[],66],[66],0,[[]],[[]],0,0,0,0,[66,11],0,[[66,11]],[[66,11]],[[66,11,11,12,12,12,12,12,12]],[[],7],[[],7],[[],8],0,0,0,0,0,0,[[]],[[]],[[],67],[67],[[]],[[]],[[67,12,12,12]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],68],[68],[[]],[[]],[[12,12],68],[[68,12,12]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],69],[69],[[]],[69,11],[[]],[[69,11],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],70],[70],[[]],[[]],[[70,12,12,12],12],[[],7],[[],7],[[],8],0,[[]],[[]],[[],71],[71],[[]],[[]],[71,11],[[71,11]],[[71,11,11,12],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],72],[72],[[]],[[]],[72,63],[[72,63],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],73],[73],[[]],[[]],[73,65],[[73,65],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],74],[74],[[]],[[]],[[74,12,12],12],[[],7],[[],7],[[],8],0,[[]],[[]],[[],75],[75],[[]],[[]],[[75,11,11],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],76],[76],[[]],[[]],[[76,12],12],[[],7],[[],7],[[],8],0,[[]],[[]],[[],77],[77],[[]],[[]],[[77,11],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],78],[78],[[]],[[]],[[78,12,12],12],[[],7],[[],7],[[],8],0,[[]],[[]],[[],79],[79],[[]],[[]],[[79,11,11],11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],80],[80],[[]],[[]],[[80,11],12],[[],7],[[],7],[[],8],0,[[]],[[]],[[],81],[81],[[]],[[]],[[81,82],12],[[],7],[[],7],[[],8],0,0,0,[12,31],[[12,12]],[[12,12]],[[12,12]],[[12,12]],[[]],[[]],[12,12],[[]],[[],12],[[12,12],31],[[12,83],31],[[12,32],33],[[12,32],33],[35,12],[34,12],[31,12],[24,12],[84,12],[[]],[83,12],[[]],[83,12],[12],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,[[85,85]],[[]],[[]],[85,85],[[]],[[],85],[[85,85],31],[[85,32],33],[[85,32],33],[10,85],[35,85],[34,85],[[]],[86,85],[[85,[87,[17]]],34],[[]],[34,85],[85],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,[[25,25]],[[]],[[]],[25,25],[[]],[[],25],[[25,25],31],[[25,32],33],[[25,32],33],[34,25],[35,25],[10,25],[[]],[[25,[87,[17]]],34],[[]],[34,25],[25],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,[[86,86]],[[]],[[]],[86,86],[[]],[[],86],[[86,86],31],[[86,32],33],[[86,32],33],[10,86],[34,86],[[]],[35,86],[[86,[87,[17]]],34],[[]],[[86,86],31],[34,86],[86],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,[[10,10]],[[]],[[]],[10,10],[[]],[[],10],[[10,10],31],[[10,32],33],[[10,32],33],[34,10],[35,10],[[]],[11,10],[[10,[87,[17]]],34],[[]],[[10,10],31],[34,10],[10],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,[[11,34]],[[11,11]],[[11,34]],[[11,11]],[[11,11]],[[]],[[]],[11,11],[[]],[[],11],[[11,11],31],[[11,34],31],[[11,32],33],[[11,32],33],[31,11],[12,11],[10,11],[35,11],[[]],[34,11],[5,11],[24,11],[[11,[87,[17]]],34],[11,34],[11,34],[[]],[11],[34,11],[11],[[11,11],[[44,[88]]]],[[11,17,12]],[[11,35]],[[11,11]],[[11,34]],[[11,24]],[[11,34]],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,[[63,63]],[[]],[[]],[63,63],[[]],[[],63],[[63,63],31],[[63,32],33],[[63,32],33],[65,63],[[]],[83,63],[34,63],[24,63],[35,63],[[63,17],83],[[]],[83,63],[63],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,[[65,65]],[[]],[[]],[65,65],[[]],[[],65],[[65,65],31],[[65,32],33],[[65,32],33],[83,65],[84,65],[24,65],[34,65],[35,65],[89,65],[[]],[[65,17],83],[[]],[[65,65],31],[83,65],[65],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,[89,84],[89,17],[[89,89]],[[]],[[]],[89,89],[[]],[[],89],[[89,89],31],[[89,32],33],[[89,32],33],[84,89],[35,89],[[]],[90,89],[[89,[87,[17]]],83],[[]],[83,89],[89],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,[[82,82]],[[]],[[]],[82,82],[[]],[[],82],[[82,82],31],[[82,32],33],[[82,32],33],[[]],[35,82],[24,82],[34,82],[84,82],[[82,17],83],[[]],[[82,82],31],[83,82],[82],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,[[90,90]],[[]],[[]],[90,90],[[]],[[],90],[[90,90],31],[[90,32],33],[[90,32],33],[34,90],[35,90],[85,90],[[]],[[90,[87,[17]]],34],[[]],[34,90],[90],[[]],[[],36],[[],7],[[],7],[[],8],0,[[]],[[]],[[]],0,[[]],[[]],[[],91],[91],[[]],[[]],[[91,12,12],12],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],92],[92],[[]],[92,12],[[]],[[92,12,12],12],[92],[92],[[],7],[[],7],[[],8],0,[[]],[[]],[[],93],[93],[[]],[[]],[93,11],[[93,11,12,12,12],11],[93],[93],[[],7],[[],7],[[],8],0,[[]],[[]],[[],94],[94],[[]],[94,12],[[]],[[94,12],12],[94],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,[[]],[[]],[[],95],[95],[[]],0,0,[[]],0,[95,11],0,0,[[95,11,12,12,12],11],[95],[95],[[],7],[[],7],[[],8],0,[[]],[[]],0,[[],96],[96],[[]],[[96,17]],[[96,17]],[[]],[96,11],[[96,[18,[86]]]],[[96,[18,[11]]]],[[96,[18,[12]]]],[[96,11,12,[18,[86]]],11],[96],[[],7],[[],7],[[],8],0,[[]],[[]],0,[[],97],[97],[[]],[[97,17]],[[97,17]],[[]],[97,11],[[97,[18,[85]]]],[[97,[18,[11]]]],[[97,[18,[12]]]],[[97,11,12,[18,[85]]],11],[97],[[],7],[[],7],[[],8],0,[[]],[[]],0,[[],98],[98],[[]],[[98,17]],[[98,17]],[[]],[98,11],[[98,[18,[90]]]],[[98,[18,[11]]]],[[98,[18,[12]]]],[[98,11,12,[18,[90]]],11],[98],[[],7],[[],7],[[],8],0,[[]],[[]],0,[[],99],[99],[[]],[[99,17]],[[99,17]],[[]],[99,11],[[99,[18,[89]]]],[[99,[18,[11]]]],[[99,[18,[12]]]],[[99,11,12,[18,[89]]],11],[99],[[],7],[[],7],[[],8],0,[[]],[[]],0,[[],100],[100],[[]],[[100,17]],[[100,17]],[[]],[100,11],[[100,[18,[65]]]],[[100,[18,[11]]]],[[100,[18,[12]]]],[[100,11,12,[18,[65]]],11],[100],[[],7],[[],7],[[],8],0,[[]],[[]],[[],101],[101],[[101,32],33],[[]],[35,101],[[]],[101,11],[101],[[101,11,12],11],[[],36],[101,11],[[],7],[[],7],[[],8],0,[[]],[[]],[[],102],[102],[[]],[[]],[[102,11,12,86],11],[102],[102],[[],7],[[],7],[[],8],0,[[]],[[]],[[],103],[103],[[]],[[]],[[103,11,12,85],11],[103],[103],[[],7],[[],7],[[],8],0,[[]],[[]],[[],104],[104],[[]],[[]],[[104,11,12,90],11],[104],[104],[[],7],[[],7],[[],8],0,[[]],[[]],[[],105],[105],[[]],[[]],[[105,11,12,89],11],[105],[105],[[],7],[[],7],[[],8],0,[[]],[[]],[[],106],[106],[[]],[[]],[[106,11,12,65],11],[106],[106],[[],7],[[],7],[[],8],0,[[]],[[]],[[],107],[107],[[107,32],33],[[]],[35,107],[107,11],[[]],[[107,11,12],11],[107],[[],36],[107],[[],7],[[],7],[[],8],0,[[108,17]],[[]],[[]],[[],108],[[108,32],33],[[]],[35,108],[[]],[[],36],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,[[]],[[]],0,[[]],[[]],0,[[[18,[36]],[18,[36]]],109],[[],7],[[],7],[[],8],0,[[]],[[]],[[],110],[[]],[[110,53],34],[[]],[[110,[6,[40]]]],[110,11],[[110,53,11]],[[110,11]],[[110,53,11]],0,[[110,53,11]],[110],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[40,40],[[]],[[40,32],33],[[]],[27,[[7,[40]]]],[[]],[27,[[6,[40]]]],[[]],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[111,112],[[],111],[[],112],[[],111],[[]],[[]],[112,[[6,[36]]]],[[111,109],111],[[111,[6,[109]]],111],[[]],[[]],0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[53,53],[[]],[[53,32],33],[[]],[27,[[7,[53]]]],[53,17],[[]],[[]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],113],[[]],[[],[[6,[5]]]],[[],[[6,[5]]]],[[],[[6,[5]]]],[[],[[6,[5]]]],[[]],[[[6,[40]]],[[6,[5]]]],[[113,[6,[40]]],[[6,[5]]]],[[],7],[[],7],[[],8]],"p":[[3,"Computer"],[3,"Keyboard"],[3,"Memory"],[3,"Screen"],[4,"AsmInstruction"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"Cpu"],[3,"Signal15"],[3,"Signal16"],[4,"Signal"],[3,"Cpu"],[4,"Keycode"],[3,"Memory"],[3,"Rom32k"],[15,"usize"],[8,"Into"],[3,"Path"],[8,"AsRef"],[8,"Error"],[3,"Box"],[15,"u32"],[15,"u16"],[3,"Signal13"],[3,"Assembler"],[15,"str"],[4,"Dest"],[4,"Comp"],[4,"Jump"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"i16"],[15,"i32"],[3,"String"],[4,"Term"],[3,"Expression"],[3,"Generator"],[4,"VmInstruction"],[3,"Function"],[3,"Variable"],[3,"Module"],[4,"Option"],[4,"Statement"],[3,"Tokens"],[3,"Parser"],[4,"Type"],[3,"Field"],[3,"StructDec"],[4,"Keyword"],[3,"SymbolTable"],[4,"Segment"],[3,"SymbolEntry"],[4,"Symbol"],[4,"Token"],[3,"Add16"],[3,"Alu"],[3,"And"],[3,"And16"],[3,"Demux"],[3,"Demux4Way"],[4,"Signal2"],[3,"Demux8Way"],[3,"Signal3"],[3,"Alu"],[3,"FullAdder"],[3,"HalfAdder"],[3,"Inc16"],[3,"Mux"],[3,"Mux16"],[3,"Mux4Way16"],[3,"Mux8Way16"],[3,"Nand"],[3,"Nand16"],[3,"Not"],[3,"Not16"],[3,"Or"],[3,"Or16"],[3,"Or16Way"],[3,"Or8Way"],[3,"Signal8"],[15,"i8"],[15,"u8"],[3,"Signal12"],[3,"Signal14"],[3,"Range"],[4,"Ordering"],[3,"Signal6"],[3,"Signal9"],[3,"Xor"],[3,"Bit"],[3,"Counter"],[3,"Dff"],[3,"Counter"],[3,"Ram16k"],[3,"Ram4k"],[3,"Ram512"],[3,"Ram64"],[3,"Ram8"],[3,"Register16"],[3,"Ram16k"],[3,"Ram4k"],[3,"Ram512"],[3,"Ram64"],[3,"Ram8"],[3,"Register16"],[3,"Time"],[3,"VmCode"],[3,"VmEmulator"],[3,"VmPreprocessedCodeBuilder"],[3,"VmPreprocessedCode"],[3,"VmTranslator"],[13,"A"],[13,"C"],[13,"Label"],[13,"Symbol"],[8,"Compile"],[13,"IntLiteral"],[13,"Call"],[13,"Variable"],[8,"Generate"],[13,"Expression"],[13,"Return"],[13,"Let"],[8,"Tokenize"],[13,"Keyword"],[13,"Symbol"],[13,"Identifier"],[13,"Integer"],[8,"Unit"],[13,"Push"],[13,"Pop"],[13,"Label"],[13,"Goto"],[13,"IfGoto"],[13,"Function"],[13,"Call"],[13,"Return"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

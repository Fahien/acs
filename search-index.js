var searchIndex = JSON.parse('{\
"acs":{"doc":"Acs is an experimental project for learning computer …","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,10,11,11,3,11,11,11,11,11,11,11,11,11,11],"n":["logic","and","and16","demux","mux","mux16","nand","nand16","not","not16","or","or16","or8way","signal","signal16","signal8","unit","xor","And","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","And16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux16","borrow","borrow_mut","default","eval","from","into","out","set_a","sim","try_from","try_into","type_id","Nand","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Nand16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HI","LO","Signal","as_bool","bitand","bitand_assign","bitor_assign","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal16","TRUE","bitand","bitor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","set","to_owned","to_string","try_from","try_into","type_id","values","FALSE","Signal8","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","Unit","eval","tick","tock","Xor","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id"],"q":["acs","acs::logic","","","","","","","","","","","","","","","","","acs::logic::and","","","","","","","","","","","acs::logic::and16","","","","","","","","","","","acs::logic::demux","","","","","","","","","","","acs::logic::mux","","","","","","","","","","","acs::logic::mux16","","","","","","","","","","","","","acs::logic::nand","","","","","","","","","","","acs::logic::nand16","","","","","","","","","","","acs::logic::not","","","","","","","","","","","acs::logic::not16","","","","","","","","","","","acs::logic::or","","","","","","","","","","","acs::logic::or16","","","","","","","","","","","acs::logic::or8way","","","","","","","","","","","acs::logic::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal16","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal8","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::unit","","","","acs::logic::xor","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","The AND gate is built using a NOT and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a AND b</code>","","","","Similar to the AND gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","The Demultiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns …","","","","The Multiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>sel ? b : a</code>","","","","Similar to the Mux gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Carries out the simulation and returns <code>sel ? b : a</code> over …","","","","The NAND gate is the only built-in logic component","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a NAND b</code>","","","","Similar to the Nand gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","The NOT gate is built using a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>NOT inp</code>","","","","Similar to the Not gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","The OR gate is built using two NOTs and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a OR b</code>","","","","Similar to the Or gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","8-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","16 signals into one","All signals <code>HI</code>","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","8 signals into one","All signals <code>HI</code>","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Common operations for a logic unit","Evaluates the logic expression as we do with arithmetic","Carries out the tick-phase of a clock cycle: LOW","Carries out the tock-phase of a clock cycle: HIGH","The XOR gate is built using a NAND, an OR, and an AND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a XOR b</code>","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,5,5,5,5,5,5,5,5,5,5,0,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,17,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,30,30,30,0,29,29,29,29,29,29,29,29,29,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[1],[[]],[[]],[[1,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],5],[5],[[]],[[]],[[5,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],7],[7],[[]],[[]],[[7,2,2]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],8],[8],[[]],[[]],[[8,2,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],9],[9],[[]],[[]],[9,6],[[9,6]],[[9,6,6,2],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],10],[10],[[]],[[]],[[10,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],11],[11],[[]],[[]],[[11,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],12],[12],[[]],[[]],[[12,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],13],[13],[[]],[[]],[[13,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],14],[14],[[]],[[]],[[14,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],15],[15],[[]],[[]],[[15,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],16],[16],[[]],[[]],[[16,17],2],[[],3],[[],3],[[],4],0,0,0,[2,18],[[2,2]],[[2,2]],[[2,2]],[[]],[[]],[2,2],[[]],[[],2],[[2,19],18],[[2,2],18],[[2,20],21],[[2,20],21],[22,2],[23,2],[24,2],[[]],[25,2],[19,2],[18,2],[[]],[19,2],[2],[[]],[[],26],[[],3],[[],3],[[],4],0,0,0,[[6,6]],[[6,6]],[[]],[[]],[6,6],[[]],[[],6],[[6,6],18],[[6,20],21],[[6,20],21],[[]],[24,6],[23,6],[2,6],[[6,[28,[27]]],23],[[]],[23,6],[6],[[6,27,2]],[[]],[[],26],[[],3],[[],3],[[],4],0,0,0,0,[[17,17]],[[]],[[]],[17,17],[[]],[[],17],[[17,17],18],[[17,20],21],[[17,20],21],[25,17],[23,17],[24,17],[22,17],[[]],[[17,27],19],[[]],[[17,17],18],[19,17],[17],[[]],[[],26],[[],3],[[],3],[[],4],0,0,[[]],[[]],[[]],0,[[]],[[]],[[],29],[29],[[]],[[]],[[29,2,2],2],[[],3],[[],3],[[],4]],"p":[[3,"And"],[4,"Signal"],[4,"Result"],[3,"TypeId"],[3,"And16"],[3,"Signal16"],[3,"Demux"],[3,"Mux"],[3,"Mux16"],[3,"Nand"],[3,"Nand16"],[3,"Not"],[3,"Not16"],[3,"Or"],[3,"Or16"],[3,"Or8Way"],[3,"Signal8"],[15,"bool"],[15,"i8"],[3,"Formatter"],[6,"Result"],[15,"i32"],[15,"i16"],[15,"u16"],[15,"u8"],[3,"String"],[15,"usize"],[3,"Range"],[3,"Xor"],[8,"Unit"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

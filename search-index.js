var searchIndex = JSON.parse('{\
"acs":{"doc":"Acs is an experimental project for learning computer …","tn":["logic","add16","and","and16","demux","demux4way","demux8way","fulladder","halfadder","mux","mux16","mux4way16","mux8way16","nand","nand16","not","not16","or","or16","or8way","signal","signal16","signal2","signal3","signal8","unit","xor","Add16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","And","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","And16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux4Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Demux8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","FullAdder","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HalfAdder","borrow","borrow_mut","default","eval","from","into","new","sim","try_from","try_into","type_id","Mux","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux16","borrow","borrow_mut","default","eval","from","into","out","set_a","sim","try_from","try_into","type_id","Mux4Way16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Mux8Way16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Nand","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Nand16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Not16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or16","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","Or8Way","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id","HI","LO","Signal","as_bool","bitand","bitand_assign","bitor_assign","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal16","TRUE","bitand","bitor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","get","into","new","not","set","to_owned","to_string","try_from","try_into","type_id","values","FALSE","HIHI","HILO","LOHI","LOLO","Signal2","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal3","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","FALSE","Signal8","TRUE","bitand","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","from","get","into","ne","new","not","to_owned","to_string","try_from","try_into","type_id","values","Unit","eval","tick","tock","Xor","borrow","borrow_mut","default","eval","from","into","sim","try_from","try_into","type_id"],"q":["acs","acs::logic","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::add16","","","","","","","","","","","acs::logic::and","","","","","","","","","","","acs::logic::and16","","","","","","","","","","","acs::logic::demux","","","","","","","","","","","acs::logic::demux4way","","","","","","","","","","","acs::logic::demux8way","","","","","","","","","","","acs::logic::fulladder","","","","","","","","","","","acs::logic::halfadder","","","","","","","","","","","","acs::logic::mux","","","","","","","","","","","acs::logic::mux16","","","","","","","","","","","","","acs::logic::mux4way16","","","","","","","","","","","acs::logic::mux8way16","","","","","","","","","","","acs::logic::nand","","","","","","","","","","","acs::logic::nand16","","","","","","","","","","","acs::logic::not","","","","","","","","","","","acs::logic::not16","","","","","","","","","","","acs::logic::or","","","","","","","","","","","acs::logic::or16","","","","","","","","","","","acs::logic::or8way","","","","","","","","","","","acs::logic::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal16","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal3","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::signal8","","","","","","","","","","","","","","","","","","","","","","","","","","","","acs::logic::unit","","","","acs::logic::xor","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","The Add16 chip is able to add two 16-bit numbers.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a + b</code> (overflowing …","","","","The AND gate is built using a NOT and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a AND b</code>","","","","Similar to the AND gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","The Demultiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns …","","","","4-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","8-way demultiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","By means of two Half-adders, the Full-adder is able to add …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation but computing <code>a + b + c</code> and …","","","","The Half-adder chip is able to add together 2 binary …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Carries out the simulation but computing <code>a + b</code> and returns …","","","","The Multiplexer gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>sel ? b : a</code>","","","","Similar to the Mux gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Carries out the simulation and returns <code>sel ? b : a</code> over …","","","","4-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","8-way 16-bit multiplexor","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns","","","","The NAND gate is the only built-in logic component","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a NAND b</code>","","","","Similar to the Nand gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","The NOT gate is built using a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>NOT inp</code>","","","","Similar to the Not gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","The OR gate is built using two NOTs and a NAND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a OR b</code>","","","","Similar to the Or gate, but it operates in bunches of 16 …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns the logic operation …","","","","8-way Or gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","16 signals into one","All signals <code>HI</code>","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","All signals <code>LO</code>","","","","","2 signals into one","All signals <code>HI</code>","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","All signals <code>LO</code>","3 signals into one","All signals <code>HI</code>","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","All signals <code>LO</code>","8 signals into one","All signals <code>HI</code>","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Common operations for a logic unit","Evaluates the logic expression as we do with arithmetic","Carries out the tick-phase of a clock cycle: LOW","Carries out the tock-phase of a clock cycle: HIGH","The XOR gate is built using a NAND, an OR, and an AND gate","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Carries out the simulation and returns <code>a XOR b</code>","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,5,5,5,5,5,5,5,5,5,5,0,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,0,11,11,11,11,11,11,11,11,11,11,0,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,24,24,24,0,25,25,25,25,25,25,25,25,25,25,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,26,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,39,39,39,0,38,38,38,38,38,38,38,38,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[1],[[]],[[]],[[1,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],5],[5],[[]],[[]],[[5,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],7],[7],[[]],[[]],[[7,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],8],[8],[[]],[[]],[[8,6,6]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],9],[9],[[]],[[]],[[9,6,10]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],11],[11],[[]],[[]],[[11,6,12]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],13],[13],[[]],[[]],[[13,6,6,6]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],14],[14],[[]],[[]],[[6,6],14],[[14,6,6]],[[],3],[[],3],[[],4],0,[[]],[[]],[[],15],[15],[[]],[[]],[[15,6,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],16],[16],[[]],[[]],[16,2],[[16,2]],[[16,2,2,6],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],17],[17],[[]],[[]],[[17,10],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],18],[18],[[]],[[]],[[18,12],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],19],[19],[[]],[[]],[[19,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],20],[20],[[]],[[]],[[20,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],21],[21],[[]],[[]],[[21,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],22],[22],[[]],[[]],[[22,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],23],[23],[[]],[[]],[[23,6,6],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[],24],[24],[[]],[[]],[[24,2,2],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[],25],[25],[[]],[[]],[[25,26],6],[[],3],[[],3],[[],4],0,0,0,[6,27],[[6,6]],[[6,6]],[[6,6]],[[]],[[]],[6,6],[[]],[[],6],[[6,28],27],[[6,6],27],[[6,29],30],[[6,29],30],[31,6],[28,6],[[]],[32,6],[33,6],[27,6],[34,6],[[]],[28,6],[6],[[]],[[],35],[[],3],[[],3],[[],4],0,0,0,[[2,2]],[[2,2]],[[]],[[]],[2,2],[[]],[[],2],[[2,2],27],[[2,29],30],[[2,29],30],[[]],[6,2],[33,2],[31,2],[[2,[37,[36]]],33],[[]],[33,2],[2],[[2,36,6]],[[]],[[],35],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,0,[[10,10]],[[]],[[]],[10,10],[[]],[[],10],[[10,10],27],[[10,29],30],[[10,29],30],[[]],[28,10],[31,10],[32,10],[12,10],[[10,36],28],[[]],[28,10],[10],[[]],[[],35],[[],3],[[],3],[[],4],0,0,0,[[12,12]],[[]],[[]],[12,12],[[]],[[],12],[[12,12],27],[[12,29],30],[[12,29],30],[31,12],[32,12],[[]],[[12,36],28],[[]],[[12,12],27],[28,12],[12],[[]],[[],35],[[],3],[[],3],[[],4],0,0,0,[[26,26]],[[]],[[]],[26,26],[[]],[[],26],[[26,26],27],[[26,29],30],[[26,29],30],[33,26],[[]],[31,26],[34,26],[32,26],[[26,36],28],[[]],[[26,26],27],[28,26],[26],[[]],[[],35],[[],3],[[],3],[[],4],0,0,[[]],[[]],[[]],0,[[]],[[]],[[],38],[38],[[]],[[]],[[38,6,6],6],[[],3],[[],3],[[],4]],"p":[[3,"Add16"],[3,"Signal16"],[4,"Result"],[3,"TypeId"],[3,"And"],[4,"Signal"],[3,"And16"],[3,"Demux"],[3,"Demux4Way"],[4,"Signal2"],[3,"Demux8Way"],[3,"Signal3"],[3,"FullAdder"],[3,"HalfAdder"],[3,"Mux"],[3,"Mux16"],[3,"Mux4Way16"],[3,"Mux8Way16"],[3,"Nand"],[3,"Nand16"],[3,"Not"],[3,"Not16"],[3,"Or"],[3,"Or16"],[3,"Or8Way"],[3,"Signal8"],[15,"bool"],[15,"i8"],[3,"Formatter"],[6,"Result"],[15,"u16"],[15,"i32"],[15,"i16"],[15,"u8"],[3,"String"],[15,"usize"],[3,"Range"],[3,"Xor"],[8,"Unit"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
